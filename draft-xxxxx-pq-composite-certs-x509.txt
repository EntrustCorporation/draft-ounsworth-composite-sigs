



XXX WG                                            P. Kampanakis (Editor)
Internet-Draft                                             Cisco Systems
Updates: RFC2986 RFC5280 (if approved)                 December 26, 2018
Intended status: Standards Track
Expires: June 29, 2019


     Composite Postquantum Keys and Signatures in PKIX Certificates
                draft-xxxxx-pq-composite-certs-x509-00<

Abstract

   EDNOTE: This will be the abstract

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on June 29, 2019.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Kampanakis (Editor)       Expires June 29, 2019                 [Page 1]

Internet-Draft               Composite Certs               December 2018


Table of Contents

   1.  Change Log  . . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   3
     3.1.  Traditional Certificate . . . . . . . . . . . . . . . . .   3
     3.2.  Composite Certificate . . . . . . . . . . . . . . . . . .   4
   4.  Composite Structures  . . . . . . . . . . . . . . . . . . . .   4
     4.1.  CompositeAlgorithmIdentifier  . . . . . . . . . . . . . .   4
     4.2.  CompositePublicKey  . . . . . . . . . . . . . . . . . . .   4
     4.3.  CompositeSignatureValue . . . . . . . . . . . . . . . . .   4
     4.4.  SubjectPublicKeyInfo  . . . . . . . . . . . . . . . . . .   5
   5.  Composite Certificates  . . . . . . . . . . . . . . . . . . .   5
     5.1.  Validation  . . . . . . . . . . . . . . . . . . . . . . .   6
   6.  Certificate Enrollment  . . . . . . . . . . . . . . . . . . .   6
     6.1.  PCKS#10 . . . . . . . . . . . . . . . . . . . . . . . . .   6
     6.2.  Subsequent Enrollments with Overlapping Public Keys . . .   7
   7.  Certificate Revocation  . . . . . . . . . . . . . . . . . . .   7
     7.1.  Certificate Revocation Lists (CRLs) . . . . . . . . . . .   7
       7.1.1.  CertificateList . . . . . . . . . . . . . . . . . . .   8
       7.1.2.  TBS Cert List . . . . . . . . . . . . . . . . . . . .   8
     7.2.  Revoking an algorithm: Revoked Algorithms CRL Extension .   9
     7.3.  End-Entity Requested Revocation . . . . . . . . . . . . .  10
   8.  New Algorithm Identifiers . . . . . . . . . . . . . . . . . .  10
   9.  In Practice . . . . . . . . . . . . . . . . . . . . . . . . .  10
   10. Implications for existing standards . . . . . . . . . . . . .  11
     10.1.  RFC 2986 . . . . . . . . . . . . . . . . . . . . . . . .  11
     10.2.  RFC 5280 . . . . . . . . . . . . . . . . . . . . . . . .  11
     10.3.  Cryptographic protocols  . . . . . . . . . . . . . . . .  11
   11. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  11
   12. Security Considerations . . . . . . . . . . . . . . . . . . .  12
   13. Appendices  . . . . . . . . . . . . . . . . . . . . . . . . .  12
     13.1.  Comparison with draft-truskovsky-lamps-pq-hybrid-x509  .  12
   14. Contributors  . . . . . . . . . . . . . . . . . . . . . . . .  12
   15. Acknowledgenents  . . . . . . . . . . . . . . . . . . . . . .  12
   16. References  . . . . . . . . . . . . . . . . . . . . . . . . .  13
     16.1.  Normative References . . . . . . . . . . . . . . . . . .  13
     16.2.  Informative References . . . . . . . . . . . . . . . . .  13
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  13

1.  Change Log

   EDNOTE: Remove this section before publication.

   draft-xxxxx-pq-composite-certs-x509-00

   o  Beginning of the draft




Kampanakis (Editor)       Expires June 29, 2019                 [Page 2]

Internet-Draft               Composite Certs               December 2018


2.  Introduction

   EDNOTE: This will be the Introduction

   During the transition to post-quantum cryptography, the deployment of
   cryptographic certificates using post-quantum algorithms will face
   two challenges

   o  Algorithm strength uncertainty: During the transition period, some
      post-quantum signature and encryption algorithms will not be fully
      trusted, while also the trust in legacy public key algorithms will
      also start to erode.  A relying party may learn some time after
      certificate deployment that a public key algorithm has become
      untrustworthy, but in the interim, they may not know which
      algorithm an adversary has compromised.

   o  Backwards compatibility: During the transition period, post-
      quantum algorithms will not be supported by all clients.

   This document provides a mechanism to address algorithm strength
   uncertainty by providing formats for encoding multiple public keys
   into the existing public key field.  The issue of backwards
   compatibility is left open to be addressed in separate draft(s).

3.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   This document defines the following terms:

   o  Traditional Certificate

   o  Composite certificate

   EDNOTE: Look up the standard way to do glossaries in RFCs.  EDNOTE:
   I'm not sure we actually need these terms in this draft.  We'll
   certainly need them in the Parallel PKIs draft.

3.1.  Traditional Certificate

   An X.509 certificate conforming to [RFC5280].  In particular, a
   certificate containing a single subject public key, and a single
   issuer signature.




Kampanakis (Editor)       Expires June 29, 2019                 [Page 3]

Internet-Draft               Composite Certs               December 2018


3.2.  Composite Certificate

   An X.509 certificate containing two or more subject public keys and
   two or more issuer signatures as defined in this document.

4.  Composite Structures

   This section defines general structures for holding multiple subject
   public keys. ~~DESCRIBE DESIGN AND INTENT, SEQUENCE SO WE HAVE 2 OR
   MORE, BLAH BLAH~~ This addresses the "algorithm strength uncertainty"
   concern from Section 2, though the authors note that this mechanism
   may have prove to have utility beyond the post-quantum migration.

   Defining composite algorithm identifiers in this way avoids the
   exponential proliferation of OIDs needed for each pairwise
   combination of signature algorithms.  This scheme also naturally
   extends from 2-keypair to n-keypair should a vendor find a use for
   this.

4.1.  CompositeAlgorithmIdentifier

   We define the following new structure:

   CompositeAlgorithmIdentifier ::= SEQUENCE OF AlgorithmIdentifier

4.2.  CompositePublicKey

   We define the following new structure:

   id-ce-CompositeAlgorithmIdentifier OBJECT IDENTIFIER ::= { OID }

   CompositeAlgorithmIdentifier ::= SEQUENCE OF AlgorithmIdentifier

   The choice of "SEQUENCE OF BIT STRING" rather than "BIT STRING" is so
   the type-length-value encoding can solve the problem of variable-
   length public keys.

4.3.  CompositeSignatureValue

   EDNOTE: This subsection describes the PKIX Composite Signatures and
   how they work.  It will also explain how signing a certificate will
   work and how verification will work.

   This section defines a general structure containing multiple
   signature values. ~~DESCRIBE DESIGN AND INTENT, SEQUENCE SO WE HAVE 2
   OR MORE, BLAH BLAH~~ This addresses the "algorithm strength
   uncertainty" concern from Section 2, though the authors note that




Kampanakis (Editor)       Expires June 29, 2019                 [Page 4]

Internet-Draft               Composite Certs               December 2018


   this mechanism may have prove to have utility beyond the post-quantum
   migration.

   We define the following new structure:

   id-ce-CompositeSignatureValue OBJECT IDENTIFIER ::= { OID }

   CompositeSignatureValue ::= SEQUENCE OF BIT STRING

   The choice of "SEQUENCE OF BIT STRING" rather than "BIT STRING" is so
   the type-length-value encoding can solve the problem of variable-
   length signature values.

4.4.  SubjectPublicKeyInfo

   We re-define the "SubjectPublicKeyInfo" structure from [RFC5280] in
   the following way so that it is backwards-compatible with the
   definition given in [RFC2986] and [RFC5280].

   SubjectPublicKeyInfo  ::=  CHOICE {
        SEQUENCE  {
             algorithm            AlgorithmIdentifier,
             subjectPublicKey     BIT STRING  },
        SEQUENCE  {
             algorithms           CompositeAlgorithmIdentifier,
             subjectPublicKeys    CompositePublicKey }
         }

   The order MUST be consistent between the "algorithms" and the
   "subjectPublicKeys", ie the 0th "CompositeAlgorithmIdentifier" MUST
   correspond to the 0th "CompositePublicKey" and so on.

5.  Composite Certificates

   We re-define the "Certificate" structure from [RFC5280] to use the
   composite public key and signature structures defined in Section 4.2
   and Section 4.3, respectively so that it is backwards-compatible with
   the definition given in [RFC5280].

   Certificate  ::=  SEQUENCE  {
        tbsCertificate       TBSCertificate,
        signatureAlgorithm   CHOICE {
             AlgorithmIdentifier,
             CompositeAlgorithmIdentifier }
        signatureValue       CHOICE {
             BIT STRING,
             CompositeSignatureValue }
       }



Kampanakis (Editor)       Expires June 29, 2019                 [Page 5]

Internet-Draft               Composite Certs               December 2018


   If either the "signatureAlgorithm" or "signatureValue" field contains
   the composite version, then the other MUST as well.  The order MUST
   be consistent between the "signatureAlgorithm"s and the
   "signatureValue"s, ie the 0th "CompositeAlgorithmIdentifier" MUST
   correspond to the 0th "CompositeSignatureValue" and so on.

   EDNOTE: We may also need to modify the definition of
   SubjectKeyIdentifier (https://tools.ietf.org/html/rfc5280#section-
   4.2.1.2) to be "as it is now, or the hash of the
   "CompositePublicKey"", being specific about which tags and length
   values are included in the hash.

5.1.  Validation

   EDNOTE: talk about how composite certs are validated.  Specifically
   address what happens if a client supports only some of the algs.  Do
   we need to bring in a "SHOULD contain exactly 2 signatures, but MAY
   contain an arbitrary number if the vendor has a client-policy
   mechanism by which they can specify an algorithm verification policy"
   in Section 4.3 ?

   EDNOTE: reference {sec-revokedalgorithms}

   EDNOTE: be consistent through this doc "validation" vs "verificiton"

6.  Certificate Enrollment

   Some aspects of certificate enrollment need to be modified to
   accommodate certificates with composite public keys and signatures.

6.1.  PCKS#10

   To place multiple public keys into a certificate signing request, the
   only modification needed to the PKCS#10 format is to replace the
   definition of "SubjectPublicKeyInfo " given in [RFC2986] with the one
   given above in Section 4.4, which is backwards-compatible with the
   previous definition.

   To place multiple signatures into a certificate signing request, we
   re-define the "CertificationRequest" from [RFC2986].











Kampanakis (Editor)       Expires June 29, 2019                 [Page 6]

Internet-Draft               Composite Certs               December 2018


   CertificationRequest ::= SEQUENCE {
           certificationRequestInfo CertificationRequestInfo,
           signatureAlgorithm   CHOICE {
                AlgorithmIdentifier{{ SignatureAlgorithms }},
                CompositeAlgorithmIdentifier }
           signatureValue       CHOICE {
                BIT STRING,
                CompositeSignatureValue }
          }
      }

   If either the "signatureAlgorithm" or "signatureValue" field contains
   the composite version, then the other MUST as well.  The order MUST
   be consistent between the "signatureAlgorithm"s and the
   "signatureValue"s, ie the 0th "CompositeAlgorithmIdentifier" MUST
   correspond to the 0th "CompositeSignatureValue" and so on.

   EDNOTE: I'm not super familiar with RFC2986.  Please double-check.
   Needs a thorough read-through of RFC2986 for other things that might
   need modification.

6.2.  Subsequent Enrollments with Overlapping Public Keys

   Once an entity in the PKI has a valid composite certificate, it MAY
   send subsequent certificate enrollment requests for traditional
   certificates containing a public key from the composite certificate
   using the same DN.  If the CA has previously issued one or more
   currently valid composite certificates for the same entity,
   containing that public key, and containing the same list of SANs,
   then it MUST include one "wtv_we_call_it" extension pointing to each
   such certificate, and MUST set the certificate expiry date to be not
   later than the expiry date of the referenced composite certificate
   with the {earliest expiry date?, latest expiry date?}.

7.  Certificate Revocation

   EDNOTE: This subsection will talk about compromises of keys,
   revocation and how recovation will be verified.

   When a CA checks for key reuse of compromised keys, they SHOULD
   (MUST?) check each key individually, not a bit-for-bit match of the
   entire "CompositePublicKey" field.

7.1.  Certificate Revocation Lists (CRLs)

   EDNOTE: A mention to OCSP implications should be made.





Kampanakis (Editor)       Expires June 29, 2019                 [Page 7]

Internet-Draft               Composite Certs               December 2018


   EDNOTE: The mechanism for globally revoking an algorithm should be
   mentioned, along with the practical suggestion that an algorithm MAY
   be globally revoked on one CRL but not an another (for example, a CA
   may design for a staged deprecation by placing certificates that will
   need to be valid beyond the deprecation of its algorithm on their own
   CRL).

   EDNOTE: RFC5280 Section 5: "Environments with additional or special
   purpose requirements may build on this profile or may replace it."
   ... include a sentence with the same language that we are doing this.

7.1.1.  CertificateList

   We re-define the "CertificateList" structure from [RFC5280] to use
   the composite signature structure defined in Section 4.3 so that it
   is backwards-compatible with the definition given in [RFC5280].

   CertificateList  ::=  SEQUENCE  {
           tbsCertList          TBSCertList,
           signatureAlgorithm   CHOICE {
                AlgorithmIdentifier{{ SignatureAlgorithms }},
                CompositeAlgorithmIdentifier }
           signatureValue       CHOICE {
                BIT STRING,
                CompositeSignatureValue }

   The "signatureAlgorithm" field MUST contain the same algorithm
   identifier as the signature field in the sequence tbsCertList
   Section 7.1.2.

   EDNOTE: should echo / update the text in RFC5280: 5.1.1.2.
   signatureAlgorithm, and 5.1.1.3.  signatureValue

7.1.2.  TBS Cert List

   We re-define the "TBSCertList" structure from [RFC5280] to use the
   composite signature structure defined in Section 4.3 so that it is
   backwards-compatible with the definition given in [RFC5280].

   TBSCertList  ::=  SEQUENCE  {
           ...
           signature   CHOICE {
                AlgorithmIdentifier,
                CompositeAlgorithmIdentifier },
           ...
                                     }





Kampanakis (Editor)       Expires June 29, 2019                 [Page 8]

Internet-Draft               Composite Certs               December 2018


   The "..." indicates that all other fields retain their definitions
   from [RFC5280] or elsewhere.

   The "signature" field MUST contain the same algorithm identifier as
   the signatureAlgorithm field in the sequence CertificateList
   Section 7.1.1.

7.2.  Revoking an algorithm: Revoked Algorithms CRL Extension

   Since a certificate may contain public keys and / or signatures, it
   is conceivable that even though a cryptographic algorithm is
   considered deprecated, a certificate may contain enough keys and
   signatures on alternative strong algorithms to warrant continuing to
   use that certificate in production.  This section provides a CRL
   Extension by which a Certificate Authority can communicate the
   deprecation of an algorithm without causing a mass revocation of
   certificates.  The goal is that by providing such a mechanism, the
   world can more quickly react to news of algorithm compromise compared
   to the need to revoke and re-issue all certificates using that
   algorithm.

   EDNOTE: the above paragraph could use some polishing.  EDNOTE: choose
   a word for this: "Revoking an algorithm" vs "Deprecating an
   algorithm" vs something-else ?

   This extension is OPTIONAL.  If a CRL contains only composite
   certificates, then this extension SHOULD be designated as critical.
   If a CRL contains a mixture of composite and traditional certificates
   then it SHOULD be designated as non-critical.

   If the Revoked Algorithms extension is present in the CRL covering an
   otherwise non-revoked certificate, then a client performing
   certificate validation MUST skip any signatures corresponding to a
   revoked algorithm; thus a certificate is valid only if it would have
   been valid had those Algorithm IDs and Signature Values been omitted
   from the certificate.

   EDNOTE: I feel like the wording above can be tightened up to be more
   precise.

   EDNOTE: mention OCSP; is it the OCSP Responder's responsibility or
   the client's to check this?

   id-ce-RevokedAlgorithms OBJECT IDENTIFIER ::= { OID }

   RevokedAlgorithms ::= CompositeAlgorithmIdentifier





Kampanakis (Editor)       Expires June 29, 2019                 [Page 9]

Internet-Draft               Composite Certs               December 2018


   Note that a similar mechanism could be used on a per-certificate
   basis via CRL Entry Extensions, however the authors believe that
   giving the option to perform partial revocation of a certificate (ie
   revoking some keys or signatures but leaving the certificate as a
   whole valid) will greatly increase the complexity of certificate
   validation routines, thus increasing the chance of implementation
   bugs leading to vulnerabilities, without providing a commensurate
   amount of increased functionality.  By not defining a new CRL Entry
   Extension, the following requirement is implied: if any key within a
   certificate warrant revocation, the entire certificate MUST be
   revoked using the existing revocation mechanisms.

7.3.  End-Entity Requested Revocation

   EDNOTE: Before drafting this section, there's a debate to be had
   about whether a single-key revocation request has the authority to
   revoke a composite cert.  Options:

   o  A signature from any key in the cert is sufficient to authorize
      revocation (this trivially requires no modification of protocols).

   o  A signature from any key in the cert using a non-revoked algorithm
      is sufficient to authorize revocation (this trivially requires no
      modification of protocols). _Note that if the cert contains no
      keys using non-revoked algorithms, then the cert is defacto
      revoked already.  Mike votes for this option._

   o  Signatures from all keys in the cert using non-revoked algorithms
      are required to authorize revocation (research needed into
      revocation protocols)

   o  Signatures from all keys in the cert are required to authorize
      revocation (research needed into revocation protocols)

   EDNOTE: We may need to wade into modifications to the CMP / SCEP /
   EST protocols (but I really hope not).

8.  New Algorithm Identifiers

   EDNOTE: This subsection defines the OIDs for the initial composite
   algorithm combinations we want to define.  EDNOTE: Merge with
   Section 11 ??

9.  In Practice

   EDNOTE: This section will talk about practical issue of how these
   certificates will be used.  For example it will talk about the size
   of these certs and cert chains.  It will explain that if a cert in



Kampanakis (Editor)       Expires June 29, 2019                [Page 10]

Internet-Draft               Composite Certs               December 2018


   the chain is a Composite cert then the whole chain needs to be of
   Composite Certs.  It will also explain that the root CA cert does not
   have to be of the same algorithms.  The root cert SHOULD NOT be
   transferred in the authentication exchange to save transport overhead
   and thus it can be different than the intermediate and leaf certs.
   It will talk about overhead (size and processing).  It will also
   discuss backwards compatibility.  It could include a subsection about
   implementation considerations.

10.  Implications for existing standards

10.1.  RFC 2986

   EDNOTE: summarize the updates to RFC 2986 (CSR / PKCS#10).

10.2.  RFC 5280

   EDNOTE: summarize the updates to RFC 5280 (X.509).

10.3.  Cryptographic protocols

   EDNOTE: This section talks about how protocols like (D)TLS and IKEv2
   are affected by this specifications.  It will not attempt to solve
   all these problems, but it will explain the rationale, how things
   will work and what open problems need to be solved.  It will talk
   about implications of how to distinguish what cert chain to send.  It
   will describe how signature_algorithms extension will be used in TLS.
   What is missing in TLS and IKEv2 like what and how to sign something
   with the two private keys.  It will discuss overhead (size and
   processing) as in Section 9.  It will also discuss PKCS#10.

11.  IANA Considerations

   EDNOTE: This section will include content only if new OIDs or IANA
   codepoints are asigned for it.

   There are no IANA Considerations for this specification.  EDNOTE: ^^
   ??

   EDNOTE: We will need OIDs for these ASN.1 structures:

   o  CompositeAlgorithmIdentifier

   o  CompositePublicKey

   o  CompositeSignatureValue





Kampanakis (Editor)       Expires June 29, 2019                [Page 11]

Internet-Draft               Composite Certs               December 2018


12.  Security Considerations

   EDNOTE: This section includes the Security Considerations.

   o  Case: Only one key is compromised.

   o  Case: An entire algorithm is compromised.

   o  CA implementations need to be careful when checking for
      compromised key reuse: unpack the CompositePublicKey structure and
      compare individual keys.

13.  Appendices

13.1.  Comparison with draft-truskovsky-lamps-pq-hybrid-x509

   EDNOTE: This section will explain the differences from
   [I-D.truskovsky-lamps-pq-hybrid-x509].  IPR Claims should be
   mentioned here if necessary.  Other things to consider are the things
   we discussed in an email thread like simplicity and format,
   inadvertnt implementation errors, algorithm agility.

   (MO): Move to appendix, or to a supporting document?

14.  Contributors

   EDNOTE: This section includes the contributors of this draft so the
   authors in the first page do not exceed five and thus violate
   RFC2223-bis.  Example where this happens is RFC1122.  We can have
   another Editor for this draft.  Doesn't need to be Panos.

   This document incorporates contributions and comments from a large
   group of experts.  The Editor would especially like to acknowledge
   the tireless dedication of the following people, who attended many
   long meetings and generated millions of bytes of electronic mail over
   the past 3 years months in pursuit of this document: Mike Ounsworth
   (Entrust Datacard), John Gray (Entrust Datacard), Serge Mister
   (Entrust Datacard), Scott Fluhrer (Cisco Systems) and Panos
   Kampanakis (Cisco Systems).

   We are grateful to all, including any contributors who may have been
   inadvertently omitted from this list.

15.  Acknowledgenents

   EDNOTE: this section include all those that need to be acknowledged
   in the draft




Kampanakis (Editor)       Expires June 29, 2019                [Page 12]

Internet-Draft               Composite Certs               December 2018


16.  References

16.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC2986]  Nystrom, M. and B. Kaliski, "PKCS #10: Certification
              Request Syntax Specification Version 1.7", RFC 2986,
              DOI 10.17487/RFC2986, November 2000,
              <https://www.rfc-editor.org/info/rfc2986>.

   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, DOI 10.17487/RFC5280, May 2008,
              <https://www.rfc-editor.org/info/rfc5280>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

16.2.  Informative References

   [I-D.truskovsky-lamps-pq-hybrid-x509]
              Truskovsky, A., Geest, D., Fluhrer, S., Kampanakis, P.,
              Ounsworth, M., and S. Mister, "Multiple Public-Key
              Algorithm X.509 Certificates", draft-truskovsky-lamps-pq-
              hybrid-x509-01 (work in progress), August 2018.

Author's Address

   Panos Kampanakis
   Cisco Systems

   Email: pkampana@cisco.com













Kampanakis (Editor)       Expires June 29, 2019                [Page 13]
