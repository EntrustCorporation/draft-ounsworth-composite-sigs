



LAMPS                                                       M. Ounsworth
Internet-Draft                                                   Entrust
Intended status: Standards Track                                 M. Pala
Expires: November 19, 2022                                     CableLabs
                                                            May 18, 2022


              Composite Signatures For Use In Internet PKI
                  draft-ounsworth-pq-composite-sigs-07

Abstract

   With the widespread adoption of post-quantum cryptography will come
   the need for an entity to possess multiple public keys on different
   cryptographic algorithms.  Since the trustworthiness of individual
   post-quantum algorithms is at question, a multi-key cryptographic
   operation will need to be performed in such a way that breaking it
   requires breaking each of the component algorithms individually.
   This requires defining new structures for holding composite signature
   data.  This document defines a structure generic enough to be useful
   beyond the post-quantum transition for any situation where a widely-
   supported but untrusted algorithm is being migrated to newer
   cryptography.

   This document defines the structures CompositeSignatureValue, and
   CompositeParams, which are sequences of the respective structure for
   each component algorithm and allows for both explicitely-defined
   combinations of algorithms as well generic runtime-flexible signature
   algorithms.  This document also defines processes for generating and
   verifying composite signatures.  This document makes no assumptions
   about what the component algorithms are, provided that their
   algorithm identifiers and signature generation and verification
   processes are defined.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."



Ounsworth & Pala        Expires November 19, 2022               [Page 1]

Internet-Draft              PQ Composite Sigs                   May 2022


   This Internet-Draft will expire on November 19, 2022.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   4
   2.  Composite Signature Structures  . . . . . . . . . . . . . . .   4
     2.1.  Composite Keys  . . . . . . . . . . . . . . . . . . . . .   5
       2.1.1.  Key Usage Bits  . . . . . . . . . . . . . . . . . . .   5
     2.2.  sa-CompositeSignature . . . . . . . . . . . . . . . . . .   5
     2.3.  CompositeSignatureValue . . . . . . . . . . . . . . . . .   6
     2.4.  Encoding Rules  . . . . . . . . . . . . . . . . . . . . .   6
   3.  Algorithm Identifiers . . . . . . . . . . . . . . . . . . . .   6
     3.1.  id-alg-composite  . . . . . . . . . . . . . . . . . . . .   7
     3.2.  Other Explicit Algorithms . . . . . . . . . . . . . . . .   7
   4.  Composite Signature Processes . . . . . . . . . . . . . . . .   8
     4.1.  Composite Signature Generation Process  . . . . . . . . .   8
     4.2.  Composite Signature Verification Process  . . . . . . . .   9
   5.  In Practice . . . . . . . . . . . . . . . . . . . . . . . . .  11
     5.1.  Cryptographic protocols . . . . . . . . . . . . . . . . .  11
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  12
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  12
     7.1.  Policy for Deprecated and Acceptable Algorithms . . . . .  12
     7.2.  OR Modes  . . . . . . . . . . . . . . . . . . . . . . . .  13
       7.2.1.  Subset Signature Generation . . . . . . . . . . . . .  13
       7.2.2.  Subset Signature Verification . . . . . . . . . . . .  13
   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  14
     8.1.  Normative References  . . . . . . . . . . . . . . . . . .  14
     8.2.  Informative References  . . . . . . . . . . . . . . . . .  15
   Appendix A.  Creating explicit combinations . . . . . . . . . . .  16
   Appendix B.  Examples . . . . . . . . . . . . . . . . . . . . . .  16
     B.1.  Generic Composite Signature Examples  . . . . . . . . . .  16
     B.2.  Explicit Composite Signature Examples . . . . . . . . . .  16



Ounsworth & Pala        Expires November 19, 2022               [Page 2]

Internet-Draft              PQ Composite Sigs                   May 2022


   Appendix C.  ASN.1 Module . . . . . . . . . . . . . . . . . . . .  16
   Appendix D.  Intellectual Property Considerations . . . . . . . .  17
   Appendix E.  Contributors and Acknowledgements  . . . . . . . . .  18
     E.1.  Making contributions  . . . . . . . . . . . . . . . . . .  18
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  18

1.  Introduction

   During the transition to post-quantum cryptography, there will be
   uncertainty as to the strength of cryptographic algorithms; we will
   no longer fully trust traditional cryptography such as RSA, Diffie-
   Hellman, DSA and their elliptic curve variants, but we will also not
   fully trust their post-quantum replacements until they have had
   sufficient scrutiny and time to discover and fix implementation bugs.
   Unlike previous cryptographic algorithm migrations, the choice of
   when to migrate and which algorithms to migrate to, is not so clear.
   Even after the migration period, it may be advantageous for an
   entity's cryptographic identity to be composed of multiple public-key
   algorithms.

   The deployment of composite signatures using post-quantum algorithms
   will face two challenges

   o  Algorithm strength uncertainty: During the transition period, some
      post-quantum signature and encryption algorithms will not be fully
      trusted, while also the trust in legacy public key algorithms will
      start to erode.  A relying party may learn some time after
      deployment that a public key algorithm has become untrustworthy,
      but in the interim, they may not know which algorithm an adversary
      has compromised.

   o  Backwards compatibility: During the transition period, post-
      quantum algorithms will not be supported by all clients.

   This document provides a mechanism to address algorithm strength
   uncertainty concerns by building on [draft-ounsworth-pq-composite-
   keys-00] (NOTE: need kramdown formatting help with this ref) by
   providing formats for encoding multiple signature values into
   existing public signature fields, as well as the process for
   validating a composite signature.  Backwards compatibility is
   addressed via using composite in conjunction with a non-composite
   hybrid mode such as that described in [draft-becker-guthrie-
   noncomposite-hybrid-auth-00] (NOTE: need kramdown formatting help
   with this ref).

   This document is intended for general applicability anywhere that
   digital signatures are used within PKIX and CMS structures.




Ounsworth & Pala        Expires November 19, 2022               [Page 3]

Internet-Draft              PQ Composite Sigs                   May 2022


1.1.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   The following terms are used in this document:

   ALGORITHM: An information object class for identifying the type of
   cryptographic operation to be performed.  This document is primarily
   concerned with algorithms for producing digital signatures.

   BER: Basic Encoding Rules (BER) as defined in [X.690].

   CLIENT: Any software that is making use of a key at runtime.  This
   includes a signer, verifier, encryptor, decryptor.

   COMPONENT ALGORITHM: A single basic algorithm which is contained
   within a composite algorithm.

   COMPOSITE ALGORITHM: An algorithm which is a sequence of two or more
   component algorithms, as defined in Section 2.

   DER: Distinguished Encoding Rules as defined in [X.690].

   LEGACY: For the purposes of this document, a legacy key or signature
   is a non-composite key or signature.

   PUBLIC / PRIVATE KEY: The public and private portion of an asymmetric
   cryptographic key, making no assumptions about which algorithm.

   SIGNATURE: A digital cryptographic signature, making no assumptions
   about which algorithm.

   STRIPPING ATTACK: An attack in which the attacker is able to
   downgrade the cryptographic object to an attacker-chosen subset of
   original set of component algorithms in such a way that it is not
   detectable by the receiver.  For example, substituting a composite
   public key or signature for a version with fewer components.

2.  Composite Signature Structures

   In order for signatures to be composed of multiple algorithms, we
   define encodings consisting of a sequence of signature primitives
   (aka "component algorithms") such that these structures can be used
   as a drop-in replacement for existing signature fields such as those



Ounsworth & Pala        Expires November 19, 2022               [Page 4]

Internet-Draft              PQ Composite Sigs                   May 2022


   found in PKCS#10 [RFC2986], CMP [RFC4210], X.509 [RFC5280], CMS
   [RFC5652].

2.1.  Composite Keys

   A Composite signature MUST be associated with a Composite public key
   as defined in draft-ounsworth-pq-composite-keys-00] (NOTE: need
   kramdown formatting help with this ref).

2.1.1.  Key Usage Bits

   For protocols such as X.509 [RFC5280] that specify key usage along
   with the public key, then the composite public key associated with a
   composite signature MUST have a signing-type key usage.

   If the keyUsage extension is present in a Certification Authority
   (CA) certificate that indicates id-composite-key, then any
   combination of the following values MAY be present:

   digitalSignature;
   nonRepudiation;
   keyCertSign; and
   cRLSign.

   If the keyUsage extension is present in an End Entity (EE)
   certificate that indicates id-composite-key, then any combination of
   the following values MAY be present:

   digitalSignature; and
   nonRepudiation;

2.2.  sa-CompositeSignature

   The ASN.1 algorithm object for a composite signature is:

   sa-CompositeSignature SIGNATURE-ALGORITHM ::= {
       IDENTIFIER identifier
       VALUE CompositeSignatureValue
       PARAMS ANY DEFINED BY ALGORITHM
       PUBLIC-KEYS { pk-Composite }
       SMIME-CAPS { IDENTIFIED BY id-alg-composite } }
   }

   The identifier specifies the type of composite signature and the
   component algorithms.  This document defines a generic composite
   algorithm id-alg-composite in Section 3.1, and allows for other
   standards that will define explicit algorithms that specify which
   component algorithms are to be contained within them.



Ounsworth & Pala        Expires November 19, 2022               [Page 5]

Internet-Draft              PQ Composite Sigs                   May 2022


2.3.  CompositeSignatureValue

   The output of the composite signature algorithm is the DER encoding
   of the following structure:

   CompositeSignatureValue ::= SEQUENCE SIZE (2..MAX) OF BIT STRING

   Where each BIT STRING within the SEQUENCE is a signature value
   produced by one of the component keys.  It MUST contain one signature
   value produced by each component algorithm, and in the same order as
   in the associated CompositeParams object.

   A CompositeSignatureValue MUST contain the same number of component
   signatures as the corresponding public and private keys, and the
   order of component signature values MUST correspond to the component
   public keys.

   The choice of "SEQUENCE OF BIT STRING", rather than for example a
   single BIT STRING containing the concatenated signature values, is to
   gracefully handle variable-length signature values by taking
   advantage of ASN.1's built-in length fields.

2.4.  Encoding Rules

   Many protocol specifications will require that composite signature
   data structures be represented by an octet string or bit string.

   When an octet string is required, the DER encoding of the composite
   data structure SHALL be used directly.

   When a bit string is required, the octets of the DER encoded
   composite data structure SHALL be used as the bits of the bit string,
   with the most significant bit of the first octet becoming the first
   bit, and so on, ending with the least significant bit of the last
   octet becoming the last bit of the bit string.

   In the interests of simplicity and avoiding compatibility issues,
   implementations that parse these structures MAY accept both BER and
   DER.

3.  Algorithm Identifiers

   Some use-cases desire the flexibility of choosing any combination of
   supported algorithms at runtime, while others desire the rigidity of
   explicitely-specified combinations of algorithms.






Ounsworth & Pala        Expires November 19, 2022               [Page 6]

Internet-Draft              PQ Composite Sigs                   May 2022


3.1.  id-alg-composite

   The id-alg-composite algorithm identifier is used for identifying a
   generic composite signature.  This algorithm allows for runtime
   agents to use arbitrary combinations of algorithms -- ie it does not
   need pre-defined OIDs for specific combinations.  This identifier
   MUST be used in sa-CompositeSignature.identifier.

   id-alg-composite OBJECT IDENTIFIER ::= {
       iso(1)  identified-organization(3) dod(6) internet(1) private(4)
       enterprise(1) OpenCA(18227) Algorithms(2) id-alg-composite(1) }

   EDNOTE: this is a temporary OID for the purposes of prototyping.  We
   are requesting IANA to assign a permanent OID, see Section 6.

   The following algorithm parameters MUST be included:

   CompositeParams ::= SEQUENCE SIZE (2..MAX) OF AlgorithmIdentifier

   The signature's CompositeParams sequence MUST contain the same
   component algorithms listed in the same order as in the associated
   CompositePrivateKey and CompositePublicKey.

   The motivation for this variant is primarily for prototyping work
   prior to the standardization of algorithm identifiers for explicit
   combinations of algorithms.  However, the authors envision that this
   variant will remain relevant beyond full standardization for example
   in environments requiring very high levels of crypto agility, for
   example where clients support a large number of algorithms or where a
   large number of keys will be used at a time and it is therefore
   prohibitive to define algorithm identifiers for every combination of
   pairs, triples, quadtuples, etc of algorithms.

3.2.  Other Explicit Algorithms

   This variant provides a rigid way of specifying supported
   combinations of algorithms.

   The motivation for this variant is to make it easier to reference and
   enforce specific combinations of algorithms.  The authors envision
   this being useful for client-server negotiated protocols, protocol
   designers who wish to place constraints on allowable algorithm
   combinations in the protocol specification, as well as audited
   environments that wish to prove that only certain combinations will
   be supported by clients.

   Explicit algorithms must define a new signature algorithm which
   consists of:



Ounsworth & Pala        Expires November 19, 2022               [Page 7]

Internet-Draft              PQ Composite Sigs                   May 2022


   o  A new algorithm identifier OID for the explicit algorithm.

   o  The algorithm identifier OID and PUBLIC-KEY type of each component
      algorithm.

   o  Signature parameters either declared ABSENT, or defined with a
      type and encoding.

   See Appendix A for guidance on creating and registering OIDs for
   specific explicit combinations.

   For explicit algorithms, it is not necessary to carry a
   CompositeParams with the list of component algorithms in the
   signature algorithm params because clients can infer the expected
   component algorithms from the algorithm identifier.  The PARAMS is
   left optional because some types of component algorithms will require
   parameters to be carried, such as RSASSA-PSS-params as defined in
   [RFC8017].  Explicit algorithms specifications MUST either define
   parameters as ABSENT, or define a type and encoding for parameters.

   In this variant, the signature is encoded as defined in Section 2.2,
   however the sa-CompositeSignature.identifier SHALL be an OID which is
   registered to represent a specific combination of component signature
   algorithms.  See Appendix B for examples.

4.  Composite Signature Processes

   This section specifies the processes for generating and verifying
   composite signatures.

   This process addresses algorithm strength uncertainty by providing
   the verifier with parallel signatures from all the component
   signature algorithms; thus breaking the composite signature would
   require breaking all of the component signatures.

4.1.  Composite Signature Generation Process

   Generation of a composite signature involves applying each component
   algorithm's signature process to the input message according to its
   specification, and then placing each component signature value into
   the CompositeSignatureValue structure defined in Section 2.2.

   The following process is used to generate composite signature values.








Ounsworth & Pala        Expires November 19, 2022               [Page 8]

Internet-Draft              PQ Composite Sigs                   May 2022


  Input:
       K1, K2, .., Kn     Private keys for the n component signature
                          algorithms, a CompositePrivateKey
       M                  Message to be signed, an octet string

  Output:
       S                  The signatures, a CompositeSignatureValue

  Signature Generation Process:
     1. Generate the n component signatures independently,
        according to their algorithm specifications.

          for i := 1 to n
              Si := Sign( Ki, M )

     2. Encode each component signature S1, S2, .., Sn into a BIT STRING
        according to its algorithm specification.

          S ::= Sequence { S1, S2, .., Sn }

     3. Output S

   Since recursive composite public keys are disallowed in ~~ Reference
   draft-ounsworth-pq-composite-pubkeys sec-composite-pub-keys ~~, no
   component signature may itself be a composite; ie the signature
   generation process MUST fail if one of the private keys K1, K2, ..,
   Kn is a composite with the OID id-alg-composite.

   A composite signature MUST produce, and include in the output, a
   signature value for every component key in the corresponding
   CompositePrivateKey.  The authors recognize that there may be valid
   use cases for "subset signature generation"; see Section 7.2.1 for
   further discussion.

4.2.  Composite Signature Verification Process

   Verification of a composite signature involves applying each
   component algorithm's verification process according to its
   specification.

   In the absence of an application profile specifying otherwise,
   compliant applications MUST output "Valid signature" (true) if and
   only if all component signatures were successfully validated, and
   "Invalid signature" (false) otherwise.

   The following process is used to perform this verification.





Ounsworth & Pala        Expires November 19, 2022               [Page 9]

Internet-Draft              PQ Composite Sigs                   May 2022


Input:
     P    Signer's composite public key
     M    Message whose signature is to be verified, an octet string
     S    Composite Signature to be verified
     A    Composite Algorithm identifier

Output:
    Validity      "Valid signature" (true) if the composite signature
                  is valid, "Invalid signature" (false) otherwise.

Signature Verification Procedure::
   1. Parse P, S, A into the component public keys, signatures,
      and algorithm identifiers

      P1, P2, .., Pn := Desequence( P )
      S1, S2, .., Sn := Desequence( S )
      A1, A2, .., An := Desequence( A )

    If Error during Desequencing, or the three sequences have
    different numbers of elements, or any of the public keys P1, P2, .., Pn or
    algorithm identifiers A1, A2, .., An are composite with the OID
    id-alg-composite then output "Invalid signature" and stop.

   2. Check each component signature individually, according to its
       algorithm specification.
       If any fail, then the entire signature validation fails.

     for i := 1 to n
          if not verify( Pi, M, Si ), then
            output "Invalid signature"

      if all succeeded, then
        output "Valid signature"

   Since recursive composite public keys are disallowed in ~~ Reference
   draft-ounsworth-pq-composite-keys sec-composite-pub-keys ~~, no
   component signature may be composite; ie the signature verification
   procedure MUST fail if any of the public keys P1, P2, .., Pn or
   algorithm identifiers A1, A2, .., An are composite with the OID id-
   alg-composite.

   Some verification clients may include a policy mechanism for
   specifying acceptable subsets of algorithms.  In these cases,
   implementors MAY, in the interest of performance, modify the above
   process to skip one or more signature validations as per their local
   client policy.  See Section 7.2 for a discussion of associated risks.





Ounsworth & Pala        Expires November 19, 2022              [Page 10]

Internet-Draft              PQ Composite Sigs                   May 2022


   In the absence of such a policy machanism that can be easily updated
   to reflect new cryptanalytic breakthroughs, clients MUST perform
   signature verifications in the AND mode defined here.  Further
   discussion of the security implications of subset signature
   verifications can be found in Section 7.2.2.

5.  In Practice

   This section addresses practical issues of how this draft affects
   other protocols and standards.

   ~~~ BEGIN EDNOTE 10~~~

   EDNOTE 10: Possible topics to address:

   o  The size of these certs and cert chains.

   o  In particular, implications for (large) composite keys /
      signatures / certs on the handshake stages of TLS and IKEv2.

   o  If a cert in the chain is a composite cert then does the whole
      chain need to be of composite Certs?

   o  We could also explain that the root CA cert does not have to be of
      the same algorithms.  The root cert SHOULD NOT be transferred in
      the authentication exchange to save transport overhead and thus it
      can be different than the intermediate and leaf certs.

   o  We could talk about overhead (size and processing).

   o  We could also discuss backwards compatibility.

   o  We could include a subsection about implementation considerations.

   ~~~ END EDNOTE 10~~~

5.1.  Cryptographic protocols

   This section talks about how protocols like (D)TLS and IKEv2 are
   affected by this specifications.  It will not attempt to solve all
   these problems, but it will explain the rationale, how things will
   work and what open problems need to be solved.  Obvious issues that
   need to be discussed.

   o  How does the protocol declare support for composite signatures?
      TLS has hooks for declaring support for specific signature
      algorithms, however it would need to be extended, because the
      client would need to declare support for both the composite



Ounsworth & Pala        Expires November 19, 2022              [Page 11]

Internet-Draft              PQ Composite Sigs                   May 2022


      infrastructure, as well as for the various component signature
      algorithms.

   o  How does the protocol use the multiple keys.  The obvious way
      would be to have the server sign using its composite public key;
      is this sufficient.

   o  Overhead; including certificate size, signature processing time,
      and size of the signature.

   o  How to deal with crypto protocols that use public key encryption
      algorithms; this document only lists how to work with signature
      algorithms.  Encoding composite public keys is straightforward;
      encoding composite ciphertexts is less so - we decided to put that
      off to another draft.

6.  IANA Considerations

   The ASN.1 module OID is TBD.  The id-alg-composite OID is to be
   assigned by IANA.  The authors suggest that IANA assign an OID on the
   id-pkix arc:

   id-alg-composite OBJECT IDENTIFIER ::= {
       iso(1) identified-organization(3) dod(6) internet(1) security(5)
       mechanisms(5) pkix(7) algorithms(6) composite(??) }

7.  Security Considerations

7.1.  Policy for Deprecated and Acceptable Algorithms

   Traditionally, a public key, certificate, or signature contains a
   single cryptographic algorithm.  If and when an algorithm becomes
   deprecated (for example, RSA-512, or SHA1), it is obvious that
   structures using that algorithm are implicitly revoked.

   In the composite model this is less obvious since a single public
   key, certificate, or signature may contain a mixture of deprecated
   and non-deprecated algorithms.  Moreover, implementers may decide
   that certain cryptographic algorithms have complementary security
   properties and are acceptable in combination even though neither
   algorithm is acceptable by itself.

   Specifying a modified verification algorithm to handle these
   situations is beyond the scope of this draft, but could be desirable
   as the subject of an application profile document, or to be up to the
   discretion of implementers.





Ounsworth & Pala        Expires November 19, 2022              [Page 12]

Internet-Draft              PQ Composite Sigs                   May 2022


   2. Check policy to see whether A1, A2, ..., An constitutes a valid
      combination of algorithms.

      if not checkPolicy(A1, A2, ..., An), then
        output "Invalid signature"

   While intentionally not specified in this document, implementors
   should put careful thought into implementing a meaningfull policy
   mechinism within the context of their signature verification engines,
   for example only algorithms that provide similar security levels
   should be combined together.

7.2.  OR Modes

7.2.1.  Subset Signature Generation

   This document defines a composite signature generation process in
   Section 4.1 wherethe signer MUST produce a signature value with each
   of their component private keys, this providing full protection of
   the content under all available component algorithms.

   The authors recognize that there may be cases where a client may wish
   to generate a composite signature that only uses a subset of the
   available component algorithms, for example to save bandwidth, or
   because a client has been issued a key for which it does not (yet)
   have implementations of all component algorithms.  This could be
   easily encoded by placing a NULL value into the corresponding field
   of the CompositeSignatureValue.  However, this mode was intentionally
   omitted from this specification as it trivially allows for stripping
   attacks where an attacker replaces a valid component signature value
   with NULL, thus reducing the security of the composite signature to
   the weakest of the available component algorithms.

   Implementors who wish to perform subset signature generations are
   advised to couple it with an out-of-band policy mechanism that limits
   the potential for stripping attacks.  Note that, in an effort to keep
   compliant implementations simple and secure, implementations claiming
   to be compliant with this draft MUST NOT generate subset signatures
   in this way, and MUST reject during verification any subset
   signatures that they encounter.

7.2.2.  Subset Signature Verification

   This document defines a composite signature verification process in
   Section 4.2 where the verifier verifies all component signatures and
   fails if any component fails.  The authors recognize that there will
   be scenarios where the verifier considers a single component
   algorithm -- or subset of component algorithms -- to provide



Ounsworth & Pala        Expires November 19, 2022              [Page 13]

Internet-Draft              PQ Composite Sigs                   May 2022


   sufficient security, and therefore for performance reasons wishes to
   skip the verification of one or more component signatures.

   -- harmonize this with Serge's blurb --

   Implementors who wish to perform subset signature verifications are
   advised to couple it with an out-of-band policy mechanism that can
   control the list of acceptable algorithm combinations, and keep this
   list up to date as new cryptanalytic advances are made.

   Risks:

   o  Failing to update client verification policy in response to
      advances in cryptanalysis

   o  Verifications of a subset of signatures leads to ambiguity in the
      security strength of the signature verification; ie if a message
      carries two signatures, one at 128 bits and the other at 112 bits
      of security and clients are verifying in an OR mode with flexible
      policy, then it becomes difficult to audit the security strength
      used at runtime.

   o  Moreover, verifying multiple algorithms provides security even in
      the event that one of the algorithms has already been broken, but
      knowledge of the break has not been made public yet.

8.  References

8.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC2986]  Nystrom, M. and B. Kaliski, "PKCS #10: Certification
              Request Syntax Specification Version 1.7", RFC 2986,
              DOI 10.17487/RFC2986, November 2000,
              <https://www.rfc-editor.org/info/rfc2986>.

   [RFC4210]  Adams, C., Farrell, S., Kause, T., and T. Mononen,
              "Internet X.509 Public Key Infrastructure Certificate
              Management Protocol (CMP)", RFC 4210,
              DOI 10.17487/RFC4210, September 2005,
              <https://www.rfc-editor.org/info/rfc4210>.






Ounsworth & Pala        Expires November 19, 2022              [Page 14]

Internet-Draft              PQ Composite Sigs                   May 2022


   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, DOI 10.17487/RFC5280, May 2008,
              <https://www.rfc-editor.org/info/rfc5280>.

   [RFC5652]  Housley, R., "Cryptographic Message Syntax (CMS)", STD 70,
              RFC 5652, DOI 10.17487/RFC5652, September 2009,
              <https://www.rfc-editor.org/info/rfc5652>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8411]  Schaad, J. and R. Andrews, "IANA Registration for the
              Cryptographic Algorithm Object Identifier Range",
              RFC 8411, DOI 10.17487/RFC8411, August 2018,
              <https://www.rfc-editor.org/info/rfc8411>.

   [X.690]    ITU-T, "Information technology - ASN.1 encoding Rules:
              Specification of Basic Encoding Rules (BER), Canonical
              Encoding Rules (CER) and Distinguished Encoding Rules
              (DER)", ISO/IEC 8825-1:2015, November 2015.

8.2.  Informative References

   [Bindel2017]
              Bindel, N., Herath, U., McKague, M., and D. Stebila,
              "Transitioning to a quantum-resistant public key
              infrastructure", 2017, <https://link.springer.com/
              chapter/10.1007/978-3-319-59879-6_22>.

   [I-D.becker-guthrie-noncomposite-hybrid-auth]
              Becker, A., Guthrie, R., and M. Jenkins, "Non-Composite
              Hybrid Authentication in PKIX and Applications to Internet
              Protocols", draft-becker-guthrie-noncomposite-hybrid-
              auth-00 (work in progress), March 2022.

   [I-D.ounsworth-pq-composite-keys]
              Ounsworth, M. and M. Pala, "Composite Public and Private
              Keys For Use In Internet PKI", draft-ounsworth-pq-
              composite-keys-00 (work in progress), July 2021.

   [RFC8017]  Moriarty, K., Ed., Kaliski, B., Jonsson, J., and A. Rusch,
              "PKCS #1: RSA Cryptography Specifications Version 2.2",
              RFC 8017, DOI 10.17487/RFC8017, November 2016,
              <https://www.rfc-editor.org/info/rfc8017>.




Ounsworth & Pala        Expires November 19, 2022              [Page 15]

Internet-Draft              PQ Composite Sigs                   May 2022


Appendix A.  Creating explicit combinations

   The following ASN.1 Information Objects may be useful in defining and
   parsing explicit pairs of signature algoritms.

   ... TODO ... copy & adapt from the keys draft.

Appendix B.  Examples

B.1.  Generic Composite Signature Examples

   TODO

B.2.  Explicit Composite Signature Examples

   TODO

Appendix C.  ASN.1 Module

   <CODE STARTS>

   Composite-Signatures-2019
     { TBD }

   DEFINITIONS IMPLICIT TAGS ::= BEGIN

   EXPORTS ALL;

   IMPORTS
     PUBLIC-KEY, SIGNATURE-ALGORITHM
       FROM AlgorithmInformation-2009  -- RFC 5912 [X509ASN1]
         { iso(1) identified-organization(3) dod(6) internet(1)
           security(5) mechanisms(5) pkix(7) id-mod(0)
           id-mod-algorithmInformation-02(58) }

     SubjectPublicKeyInfo
       FROM PKIX1Explicit-2009
         { iso(1) identified-organization(3) dod(6) internet(1)
           security(5) mechanisms(5) pkix(7) id-mod(0)
           id-mod-pkix1-explicit-02(51) }

     OneAsymmetricKey
       FROM AsymmetricKeyPackageModuleV1
         { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
           pkcs-9(9) smime(16) modules(0)
           id-mod-asymmetricKeyPkgV1(50) } ;

   --



Ounsworth & Pala        Expires November 19, 2022              [Page 16]

Internet-Draft              PQ Composite Sigs                   May 2022


   -- Object Identifiers
   --

   id-alg-composite OBJECT IDENTIFIER ::= { TBD }

   --
   -- Public Key
   --

   pk-Composite PUBLIC-KEY ::= {
       IDENTIFIER id-alg-composite
       KEY CompositePublicKey
       PARAMS ARE absent
       PRIVATE-KEY CompositePrivateKey
   }

   CompositePublicKey ::= SEQUENCE SIZE (2..MAX) OF SubjectPublicKeyInfo

   CompositePrivateKey ::= SEQUENCE SIZE (2..MAX) OF OneAsymmetricKey

   --
   -- Signature Algorithm
   --

   sa-CompositeSignature SIGNATURE-ALGORITHM ::= {
       IDENTIFIER id-alg-composite
       VALUE CompositeSignatureValue
       PARAMS TYPE CompositeParams ARE required
       PUBLIC-KEYS { pk-Composite }
       SMIME-CAPS { IDENTIFIED BY id-alg-composite } }

   CompositeParams ::= SEQUENCE SIZE (2..MAX) OF AlgorithmIdentifier

   CompositeSignatureValue ::= SEQUENCE SIZE (2..MAX) OF BIT STRING

   END

   <CODE ENDS>


Appendix D.  Intellectual Property Considerations

   The following IPR Disclosure relates to this draft:

   https://datatracker.ietf.org/ipr/3588/






Ounsworth & Pala        Expires November 19, 2022              [Page 17]

Internet-Draft              PQ Composite Sigs                   May 2022


Appendix E.  Contributors and Acknowledgements

   This document incorporates contributions and comments from a large
   group of experts.  The Editors would especially like to acknowledge
   the expertise and tireless dedication of the following people, who
   attended many long meetings and generated millions of bytes of
   electronic mail and VOIP traffic over the past year in pursuit of
   this document:

   John Gray (Entrust), Serge Mister (Entrust), Scott Fluhrer (Cisco
   Systems), Panos Kampanakis (Cisco Systems), Daniel Van Geest (ISARA),
   Tim Hollebeek (Digicert), and Francois Rousseau.

   We are grateful to all, including any contributors who may have been
   inadvertently omitted from this list.

   This document borrows text from similar documents, including those
   referenced below.  Thanks go to the authors of those documents.
   "Copying always makes things easier and less error prone" -
   [RFC8411].

E.1.  Making contributions

   Additional contributions to this draft are weclome.  Please see the
   working copy of this draft at, as well as open issues at:

   https://github.com/EntrustCorporation/draft-ounsworth-composite-sigs

Authors' Addresses

   Mike Ounsworth
   Entrust Limited
   2500 Solandt Road -- Suite 100
   Ottawa, Ontario  K2K 3G5
   Canada

   Email: mike.ounsworth@entrust.com


   Massimiliano Pala
   CableLabs

   Email: director@openca.org








Ounsworth & Pala        Expires November 19, 2022              [Page 18]
