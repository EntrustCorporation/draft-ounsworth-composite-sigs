---
title: Composite Signatures For Use In Internet PKI
abbrev: PQ Composite Sigs
# <!-- EDNOTE: Edits the draft name -->
docname: draft-ounsworth-pq-composite-sigs-08

# <!-- stand_alone: true -->
ipr: trust200902
area: Security
wg: LAMPS
kw: Internet-Draft
cat: std

coding: us-ascii
pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:
    -
      ins: M. Ounsworth
      name: Mike Ounsworth
      org: Entrust Limited
      abbrev: Entrust
      street: 2500 Solandt Road â€“ Suite 100
      city: Ottawa, Ontario
      country: Canada
      code: K2K 3G5
      email: mike.ounsworth@entrust.com

    -
      ins: M. Pala
      name: Massimiliano Pala
      org: CableLabs
      email: director@openca.org

normative:
  RFC2119:
  RFC2986:
  RFC4210:
  RFC5280:
  RFC5652:
  RFC8174:
  RFC8411:
  I-D.draft-massimo-lamps-pq-sig-certificates-00:
  X.690:
      title: "Information technology - ASN.1 encoding Rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)"
      date: November 2015
      author:
        org: ITU-T
      seriesinfo:
        ISO/IEC: 8825-1:2015


# <!-- EDNOTE: full syntax for this defined here: https://github.com/cabo/kramdown-rfc2629 -->

informative:
  I-D.draft-ounsworth-pq-composite-keys-00:
  I-D.draft-becker-guthrie-noncomposite-hybrid-auth-00:
  I-D.draft-guthrie-ipsecme-ikev2-hybrid-auth-00:
  Bindel2017:
    title: "Transitioning to a quantum-resistant public key infrastructure"
    target: "https://link.springer.com/chapter/10.1007/978-3-319-59879-6_22"
    author:
      -
        ins: N. Bindel
        name: Nina Bindel
      -
        ins: U. Herath
        name: Udyani Herath
      -
        ins: M. McKague
        name: Matthew McKague
      -
        ins: D. Stebila
        name: Douglas Stebila
    date: 2017
  RFC3279:
  RFC8017:


--- abstract

The migration to post-quantum cryptography is unique in the history of modern digital cryptography in that neither the old outgoing nor the new incoming algorithms are fully trusted to protect data for the required data lifetimes. The outgoing algorithms, such as RSA and elliptic curve, may fall to quantum cryptanalysis, while the incoming post-quantum algorithms face uncertainty about both the underlying mathematics as well as hardware and software implementations that have not had sufficient maturing time to rule out classical cryptanalytic attacks and implementation bugs.

Cautious implementer may wish to layer cryptographic algorithms such that an attacker would need to break all of them in order to compromise the data being protected. For digital signatures, this is referred to as "dual", and for encryption key establishment this as referred to as "hybrid". This document, and its companions, defines a specific instantiation of the dual and hybrid paradigm called "composite" where multiple cryptographic algorithms are combined to form a single key, signature, or key encapsulation mechanism (KEM) such that they can be treated as a single atomic object at the protocol level.

EDNOTE: the terms "dual" and "hybrid" are currently in flux. We anticipate an Informational draft to normalize terminology, and will update this draft accordingly.

This document defines the structures CompositeSignatureValue, and CompositeParams, which are sequences of the respective structure for each component algorithm. The generic composite variant is defined which allows arbitrary combinations of signature algorithms to be used in the CompositeSignatureValue and CompositeParams structures without needing the combination to be pre-registered or pre-agreed. The explicit variant is also defined which allows for a set of signature algorithm identifier OIDs to be registered together as an explicit composite signature algorithm and assigned an OID.


This document is intended to be coupled with corresponding documents that define the structure and semantics of composite public and private keys and encryption {{I-D.ounsworth-pq-composite-keys}}, however may also be used with non-composite keys, such as when a protocol combines multiple certificates into a single cryptographic operation.

<!-- End of Abstract -->


--- middle

# Changes in version -08

- hash-then-sign, and external hashing


# Terminology {#sec-terminology}
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 {{RFC2119}}  {{RFC8174}} when, and only when, they appear in all capitals, as shown here.

The following terms are used in this document:

ALGORITHM:
          A standardized cryptographic primitive, as well as 
          any ASN.1 structures needed for encoding data and 
          metadata needed to use the algorithm. This document is
          primarily concerned with algorithms for producing digital
          signatures.

BER:
          Basic Encoding Rules (BER) as defined in [X.690].

CLIENT:
          Any software that is making use of a cryptographic key.
          This includes a signer, verifier, encrypter, decrypter.

COMPONENT ALGORITHM:
          A single basic algorithm which is contained within a
            composite algorithm.

COMPOSITE ALGORITHM:
          An algorithm which is a sequence of two or more component
            algorithms, as defined in {{sec-composite-structs}}.

DER:
          Distinguished Encoding Rules as defined in [X.690].

LEGACY:   For the purposes of this document, a legacy algorithm is
          any cryptographic algorithm currently is use which is 
          not believe to be resistant to quantum cryptanalysis.

PKI:
          Public Key Infrastructure, as defined in [RFC5280].

POST-QUANTUM ALGORITHM:
          Any cryptographic algorithm which is believed to be resistant
          to classical and quantum cryptanalysis, such as the algorithms being considered for standardization by NIST.

PUBLIC / PRIVATE KEY:
          The public and private portion of an asymmetric cryptographic
            key, making no assumptions about which algorithm.

SIGNATURE:
          A digital cryptographic signature, making no assumptions
            about which algorithm.

STRIPPING ATTACK:
          An attack in which the attacker is able to downgrade the 
          cryptographic object to an attacker-chosen subset of
          original set of component algorithms in such a way that
          it is not detectable by the receiver. For example, 
          substituting a composite public key or signature for a
          version with fewer components.


# Introduction {#sec-intro}

During the transition to post-quantum cryptography, there will be uncertainty as to the strength of cryptographic algorithms; we will no longer fully trust traditional cryptography such as RSA, Diffie-Hellman, DSA and their elliptic curve variants, but we will also not
   fully trust their post-quantum replacements until they have had sufficient scrutiny and time to discover and fix implementation bugs. Unlike previous cryptographic algorithm migrations, the choice of when to migrate and which algorithms to migrate to, is not so clear. Even after the migration period, it may be advantageous for an entity's cryptographic identity to be composed of multiple public-key algorithms.

The deployment of composite signatures using post-quantum algorithms will face two challenges

- Algorithm strength uncertainty: During the transition period, some post-quantum signature and encryption algorithms will not be fully trusted, while also the trust in legacy public key algorithms will start to erode.  A relying party may learn some time after deployment that a public key algorithm has become untrustworthy, but in the interim, they may not know which algorithm an adversary has compromised.
- Backwards compatibility: During the transition period, post-quantum algorithms will not be supported by all clients.

This document provides a mechanism to address algorithm strength uncertainty concerns by building on {{I-D.ounsworth-pq-composite-keys}} by providing formats for encoding multiple signature values into existing public signature fields, as well as the process for validating a composite signature. Backwards compatibility is addressed via using composite in conjunction with a non-composite hybrid mode such as that described in {{I-D.becker-guthrie-noncomposite-hybrid-auth}}.

This document is intended for general applicability anywhere that digital signatures are used within PKIX and CMS structures.


<!-- End of Introduction section -->


# Composite Signature Structures {#sec-composite-structs}

In order for signatures to be composed of multiple algorithms, we define encodings consisting of a sequence of signature primitives (aka "component algorithms") such that these structures can be used as a drop-in replacement for existing signature fields such as those found in PKCS#10 [RFC2986], CMP [RFC4210], X.509 [RFC5280], CMS [RFC5652].


## Composite Keys

A composite signature MAY be associated with a composite public key as defined in {{I-D.ounsworth-pq-composite-keys}}, but MAY also be associated with multiple public keys from different sources, for example multiple X.509 certificates, or multiple cryptographic modules. In the latter case, composite signatures MAY be used as the mechanism for carrying multiple signatures in a non-composite authentication mechanism such as those described in {{I-D.becker-guthrie-noncomposite-hybrid-auth}}.


### Key Usage Bits

For protocols such as X.509 [RFC5280] that specify key usage along with the public key, then the composite public key associated with a composite signature MUST have a signing-type key usage.


If the keyUsage extension is present in a Certification Authority (CA) certificate that indicates a composite key, then any combination of the following values MAY be present:

~~~
digitalSignature;
nonRepudiation;
keyCertSign; and
cRLSign.
~~~

If the keyUsage extension is present in an End Entity (EE) certificate that indicates a composite key, then any combination of the following values MAY be present:

~~~
digitalSignature; and
nonRepudiation;
~~~


## CompositeSignatureValue {#sec-compositeSignatureValue}

The output of the composite signature algorithm is the DER encoding of the following structure:

~~~ asn.1
CompositeSignatureValue ::= SEQUENCE SIZE (2..MAX) OF BIT STRING
~~~
{: artwork-name="composite-sig-asn.1"}

Where each BIT STRING within the SEQUENCE is a signature value produced by one of the component keys. It MUST contain one signature value produced by each component algorithm, and in the same order as in the associated CompositeParams object.

A CompositeSignatureValue MUST contain the same number of component signatures as the corresponding public and private keys, and the order of component signature values MUST correspond to the component public keys.

The choice of `SEQUENCE OF BIT STRING`, rather than for example a single BIT STRING containing the concatenated signature values, is to gracefully handle variable-length signature values by taking advantage of ASN.1's built-in length fields.

## Composite Signature Parameters {#sec-compositeParameters}

Composite signature parameters are defined as follows and MUST be included in the composite 
signature AlgorithmIdentifier for the composite signature algorithm:

~~~ asn.1
CompositeParams ::= SEQUENCE SIZE (2..MAX) OF AlgorithmIdentifier
~~~
{: artwork-name="CompositeSignatureParams-asn.1-structures"}

The signature's CompositeParams sequence MUST contain the same component algorithms listed in the same order as in the associated CompositePublicKey. 


## Encoding Rules {#sec-encoding-rules}
<!-- EDNOTE 7: Examples of how other specifications specify how a data structure is converted to a bit string can be found in RFC 2313, section 10.1.4, 3279 section 2.3.5, and RFC 4055, section 3.2. -->

Many protocol specifications will require that composite signature data structures be represented by an octet string or bit string.

When an octet string is required, the DER encoding of the composite data structure SHALL be used directly.

When a bit string is required, the octets of the DER encoded composite data structure SHALL be used as the bits of the bit string, with the most significant bit of the first octet becoming the first bit, and so on, ending with the least significant bit of the last octet becoming the last bit of the bit string.

In the interests of simplicity and avoiding compatibility issues, implementations that parse these structures MAY accept both BER and DER.

# Algorithm Identifiers {#sec-alg-idents}

This section defines the algorithm identifiers for explicit combinations.  For simplicity and prototyping purposes, the signature algorithm object identifiers specified in this document are the same as the composite key object Identifiers specified in {draft-ounsworth-pq-composite-keys}.  A proper implementation should not presume that the object ID of a composite key will be the same as its composite signature algorithm.   

This section is not intended to be exhaustive and other authors may define others composite signature algorithms so long as they are compatible with the structures and processes defined in this and companion public and private key documents.

Some use-cases desire the flexibility for clients to use any combination of supported algorithms, while others desire the rigidity of explicitly-specified combinations of algorithms.

The following sections will indicate the details for each explicit composite signature algorithms:

Signature public key types:

Signature key type | Signature Alg    | Definition                            | Signature OID
 ---------                            | ----------                            | ------------
id-Dilithium3-RSA  | id-Dilithium3-SHA256withRSA                   | {{sec-sa-Dilithium3-SHA256withRSA}}   | 2.16.840.1.114027.80.5.3.1 (for prototyping only)
id-Dilithium3-EC-P256 | id-Dilithium3-SHA256withECDSA               | {{sec-sa-Dilithium3-SHA256withECDSA}}    | 2.16.840.1.114027.80.5.3.2 (for prototyping only)
id-Dilithium3-EC-brainpoolP256r1 | id-Dilithium3-SHA256withECDSA     | {{sec-sa-Dilithium3-SHA256withECDSA}}  | 2.16.840.1.114027.80.5.3.2 (for prototyping only)
id-Dilithium3-Ed25519   |  id-Dilithium3-Ed25519             | {{sec-sa-Dilithium3-Ed25519}}         | 2.16.840.1.114027.80.5.3.4 (for prototyping only)
id-Dilithium5-EC-P384 | id-Dilithium5-SHA384withECDSA                | {{sec-sa-Dilithium5-SHA384withECDSA}}         | 2.16.840.1.114027.80.5.3.5 (for prototyping only)
id-Dilithium5-EC-brainpoolP384r1 | id-Dilithium5-SHA384withECDSA     | {{sec-sa-Dilithium5-SHA384withECDSA}}  | 2.16.840.1.114027.80.5.3.5 (for prototyping only)
id-Dilithium5-Ed448  | id-Dilithium5-Ed448  | {{sec-sa-Dilithium5-Ed448}}           | 2.16.840.1.114027.80.5.3.7 (for prototyping only)
id-Falcon512-EC-P256 | id-Falcon512-SHA256withECDSA                  | {{sec-sa-Falcon512-SHA256withECDSA}}          | 2.16.840.1.114027.80.5.3.8 (for prototyping only)
id-Falcon512-EC-brainpoolP256r1 | id-Falcon512-SHA256withECDSA     | {{sec-sa-Falcon512-SHA256withECDSA}}   | 2.16.840.1.114027.80.5.3.8 (for prototyping only)
id-Falcon512-Ed25519  | id-Falcon512-Ed25519               | {{sec-sa-Falcon512-Ed25519}}          | 2.16.840.1.114027.80.5.3.10 (for prototyping only)
id-SPHINCSplusSHA256-EC-P256 | id-SPHINCSplusSHA256-SHA256withECDSA          | {{sec-sa-SPHINCSplusSHA256-SHA256withECDSA}}  | 2.16.840.1.114027.80.5.3.11 (for prototyping only)
id-SPHINCSplusSHA256-EC-brainpoolP256r1 | id-SPHINCSplusSHA256-SHA256withECDSA  | {{sec-sa-SPHINCSplusSHA256-SHA256withECDSA}} | 2.16.840.1.114027.80.5.3.11 (for prototyping only)
id-SPHINCSplusSHA256-Ed25519 | id-SPHINCSplusSHA256-Ed25519        | {{sec-sa-SPHINCSplusSHA256-Ed25519}}  | 2.16.840.1.114027.80.5.3.13 (for prototyping only)


## sa-CompositeSignature ASN.1 structure {#sec-composite-sig-structs}

The ASN.1 algorithm object for a composite signature is:

~~~ asn.1
sa-CompositeSignature SIGNATURE-ALGORITHM ::= {
    IDENTIFIER id-alg-composite
    VALUE CompositeSignatureValue
    PARAMS ANY DEFINED BY ALGORITHM
    PUBLIC-KEYS { pk-Composite }
    SMIME-CAPS { IDENTIFIED BY id-alg-composite } }
}
~~~

The following sections will identify each of the required components listed above:

SIGNATURE-ALGORITHM element | Definition |
---------                  | ---------- |
IDENTIFIER                  | The Object ID used to identify the composite Sinature Algorithm | 
VALUE                       | The Sequence of BIT STRINGS for each component signature value |
PARAMS                      | Signature parameters either declared ABSENT, or defined with a type and encoding |
PUBLIC-KEYS                 | The composite key required to produce the composite signature |
SMIME_CAPS                  | Not needed for composite |


This definition provides a rigid way of specifying supported combinations of algorithms.

The will make it easier to reference and enforce specific combinations of algorithms. The authors envision this being useful for client-server negotiated protocols, protocol designers who wish to place constraints on allowable algorithm combinations in the protocol specification, as well as audited environments that wish to prove that only certain combinations will be supported by clients.


See {{appdx-creatingExplicitCombinations}} for guidance on creating and registering OIDs for specific explicit combinations.

For explicit algorithms, it is not necessary to carry a CompositeParams with the list of component algorithms in the signature algorithm parameters because clients can infer the expected component algorithms from the algorithm identifier. The PARAMS is left optional because some types of component algorithms will require parameters to be carried, such as RSASSA-PSS-params as defined in [RFC8017]. {{sec-composite-sig-structs}} defines `PARAMS ANY DEFINED BY ALGORITHM` so that explicit algorithms may define params as ABSENT, use `CompositeParams` defined in {{sec-generic-composite}} or use any other encoding that is appropriate.

In this variant, the signature is encoded as defined in {{sec-composite-sig-structs}}, however the sa-CompositeSignature.identifier SHALL be an OID which is registered to represent a specific combination of component signature algorithms. See {{appdx-examples}} for examples.

## sa-Dilithium3-SHA256withRSA {#sec-sa-Dilithium3-SHA256withRSA}

IDENTIFIER: The following object identifier represents the sa-Dilithium3-SHA256withRSA
   signature algorithm:
   
   
~~~ asn.1
   sa-Dilithium3-RSA OBJECT IDENTIFIER ::= {
     joint-iso-itu-t(2) country(16) us(840) organization(1) entrust(114027)
     algorithm(80) ExplicitComposite(5) SignatureAlg(3) id-Dilithium3-SHA256withRSA(1) }
~~~ 

      EDNOTE: this is a temporary OID for the purposes of prototyping.
      We are requesting IANA to assign a permanent OID, see Section 7.

VALUE:  The sa-Dilithium3-SHA256withRSA Composite Signature Value is defined as follows:

~~~ asn.1
   SEQUENCE  {
        signatureValue     BIT STRING(TBDDilithium3Signature),
        signatureValue     BIT STRING(sha256WithRSAEncryption)
   }
~~~

PARAMS:  The sa-Dilithium3-SHA256withRSA composite signature algorithm parameters MUST be defined as follows:

~~~ asn.1
   SEQUENCE  {
        algorithm  AlgorithmIdentifier {
             algorithm id-dilithium3TBD
         },
        algorithm  AlgorithmIdentifier {
             algorithm id-sha256WithRSAEncryption
         }
   }
~~~
   
   
 where id-dilithium3TBD is defined in [I-D.ietf-lamps-dilithium-certificates]
and sha256WithRSAEncryption is defined in [RFC5754]
   

PUBLIC-KEYS:  The public key for use with sa-Dilithium3-SHA256withRSA MUST be of type id-Dilithium3-RSA 


TODO: What to do about hash functions? Does Dilithium3 specify a hash function, or do we need to specify one?

TODO: What to do about pre-hashing? Cryptographic modules prefer to receive a hash of the message rather than the entire message. However, Dilithium starts with a hash of the message pre-pended with the public key `mu := CRH( tr || m )` which provides domain-separation per public key. Perhaps the right answer is that `mu` is also the hash value to be signed by ECDSA?


## sa-Dilithium3-SHA256withECDSA {#sec-sa-Dilithium3-SHA256withECDSA}

IDENTIFIER: The following object identifier represents the sa-Dilithium3-SHA256withECDSA
   signature algorithm:
   
   
~~~ asn.1
   sa-Dilithium3-SHA256withECDSA OBJECT IDENTIFIER ::= {
     joint-iso-itu-t(2) country(16) us(840) organization(1) entrust(114027)
     algorithm(80) ExplicitComposite(5) SignatureAlg(3) id-Dilithium3-SHA256withECDSA(2) }
~~~ 

      EDNOTE: this is a temporary OID for the purposes of prototyping.
      We are requesting IANA to assign a permanent OID, see Section 7.

VALUE:  The sa-Dilithium3-SHA256withECDSA Composite Signature Value is defined as follows:

~~~ asn.1
   SEQUENCE  {
        signatureValue     BIT STRING(TBDDilithium3Signature),
        signatureValue     BIT STRING(ecdsa-with-SHA256)
   }
~~~

PARAMS:  The sa-Dilithium3-SHA256withECDSA composite signature algorithm parameters MUST be defined as follows:

~~~ asn.1
   SEQUENCE  {
        algorithm  AlgorithmIdentifier {
             algorithm id-dilithium3TBD
         },
        algorithm  AlgorithmIdentifier {
             algorithm ecdsa-with-SHA256
         }
   }
~~~
   
   
 where id-dilithium3TBD is defined in [I-D.ietf-lamps-dilithium-certificates]
and ecdsa-with-SHA256 is defined in [RFC5754]
   
PUBLIC-KEYS:  The public keys for use with sa-Dilithium3-SHA256withECDSA MUST be of type id-Dilithium3-ECDSA-P256 or id-Dilithium3-ECDSA-brainpoolP256r1


## sa-Dilithium3-Ed25519 {#sec-sa-Dilithium3-Ed25519}

IDENTIFIER: The following object identifier represents the sa-Dilithium3-Ed25519
   signature algorithm:
   
   
~~~ asn.1
   sa-Dilithium3-Ed25519 OBJECT IDENTIFIER ::= {
     joint-iso-itu-t(2) country(16) us(840) organization(1) entrust(114027)
     algorithm(80) ExplicitComposite(5) SignatureAlg(3) id-Dilithium3-Ed25519(4) }
~~~ 

      EDNOTE: this is a temporary OID for the purposes of prototyping.
      We are requesting IANA to assign a permanent OID, see Section 7.

VALUE:  The sa-Dilithium3-Ed25519 Composite Signature Value is defined as follows:

~~~ asn.1
   SEQUENCE  {
        signatureValue     BIT STRING(TBDDilithium3Signature),
        signatureValue     BIT STRING(id-Ed25519)
   }
~~~

PARAMS:  The sa-Dilithium3-Ed25519 composite signature algorithm parameters MUST be defined as follows:

~~~ asn.1
   SEQUENCE  {
        algorithm  AlgorithmIdentifier {
             algorithm id-dilithium3TBD
         },
        algorithm  AlgorithmIdentifier {
             algorithm id-Ed25519
         }
   }
~~~

where TBDDilithium3Signature is defined in [I-D.ietf-lamps-dilithium-certificates]
and Ed25519 is defined in [RFC8410]
   
PUBLIC-KEYS:  The public keys for use with sa-Dilithium3-Ed25519 MUST be of type id-Dilithium3-Ed25519


## sa-Dilithium5-SHA384withECDSA {#sec-sa-Dilithium5-SHA384withECDSA}



## sa-Dilithium5-Ed448 {#sec-sa-Dilithium5-Ed448}

IDENTIFIER: The following object identifier represents the sa-Dilithium5-Ed448
   signature algorithm:
   
   
~~~ asn.1
   sa-Dilithium5-Ed448 OBJECT IDENTIFIER ::= {
     joint-iso-itu-t(2) country(16) us(840) organization(1) entrust(114027)
     algorithm(80) ExplicitComposite(5) SignatureAlg(3) id-Dilithium5-Ed448(7) }
~~~ 

      EDNOTE: this is a temporary OID for the purposes of prototyping.
      We are requesting IANA to assign a permanent OID, see Section 7.

VALUE:  The sa-Dilithium5-Ed448 Composite Signature Value is defined as follows:

~~~ asn.1
   SEQUENCE  {
        signatureValue     BIT STRING(TBDDilithium5Signature),
        signatureValue     BIT STRING(id-Ed448)
   }
~~~

PARAMS:  The sa-Dilithium5-Ed448 composite signature algorithm parameters MUST be defined as follows:

~~~ asn.1
   SEQUENCE  {
        algorithm  AlgorithmIdentifier {
             algorithm id-dilithium5TBD
         },
        algorithm  AlgorithmIdentifier {
             algorithm id-Ed448
         }
   }
~~~

where id-dilithium5TBD is defined in [I-D.ietf-lamps-dilithium-certificates]
and id-Ed448 is defined in [RFC8410]
   
PUBLIC-KEYS:  The public keys for use with sa-Dilithium5-Ed448 MUST be of type Dilithium5-Ed448



## sa-Falcon512-SHA256withECDSA {#sec-sa-Falcon512-SHA256withECDSA}



## sa-Falcon512-Ed25519 {#sec-sa-Falcon512-Ed25519}



## sa-SPHINCSplusSHA256-SHA256withECDSA {#sec-sa-SPHINCSplusSHA256-SHA256withECDSA}



## sa-SPHINCSplusSHA256-Ed25519 {#sec-sa-SPHINCSplusSHA256-Ed25519}



## sa-alg-composite (Generic Composite Signatures) {#sec-generic-composite}

The id-alg-composite object identifier is used for identifying a generic composite signature. This algorithm allows arbitrary combinations of component signature algorithms to be used in the CompositeSignatureValue and CompositeParams structures without needing the combination to be pre-registered or standardized. This identifier MUST be used in sa-CompositeSignature.identifier.

~~~ asn.1
id-alg-composite OBJECT IDENTIFIER ::= {
    iso(1)  identified-organization(3) dod(6) internet(1) private(4)
    enterprise(1) OpenCA(18227) Algorithms(2) id-alg-composite(1) }
~~~
EDNOTE: this is a temporary OID for the purposes of prototyping. We are requesting IANA to assign a permanent OID, see {{sec-iana}}.


The following algorithm parameters MUST be included:

~~~ asn.1
CompositeParams ::= SEQUENCE SIZE (2..MAX) OF AlgorithmIdentifier
~~~
{: artwork-name="CompositeSignatureParams-asn.1-structures"}

The signature's CompositeParams sequence MUST contain the same component algorithms listed in the same order as in the associated CompositePublicKey.


The motivation for this variant is primarily for prototyping work prior to the standardization of algorithm identifiers for explicit combinations of algorithms. However, the authors envision that this variant will remain relevant beyond full standardization for example in environments requiring very high levels of crypto agility, for example where clients support a large number of algorithms or where a large number of keys will be used at a time and it is therefore prohibitive to define algorithm identifiers for every combination of pairs, triples, quadruples, etc of algorithms.


# Composite Signature Processes {#sec-composite-signature-algorithm}

This section specifies the processes for generating and verifying composite signatures.

This process addresses algorithm strength uncertainty by providing the verifier with parallel signatures from all the component signature algorithms; thus forging the composite signature would require forging all of the component signatures.

## Composite Signature Generation Process {#sec-comp-sig-gen}

Generation of a composite signature involves applying each component algorithm's signature process to the input message according to its specification, and then placing each component signature value into the CompositeSignatureValue structure defined in {{sec-composite-sig-structs}}.

The following process is used to generate composite signature values.

~~~
Input:
     K1, K2, .., Kn     Signing private keys. See note below on 
                        composite inputs.

     A1, A2, ... An     Component signature algorithms. See note below on 
                        composite inputs.

     M                  Message to be signed, an octet string

Output:
     S                  The signatures, a CompositeSignatureValue

Signature Generation Process:
   1. Generate the n component signatures independently,
      according to their algorithm specifications.

        for i := 1 to n
            Si := Sign( Ki, Ai, M )

   2. Encode each component signature S1, S2, .., Sn into a BIT STRING
      according to its algorithm specification.

        S ::= Sequence { S1, S2, .., Sn }

   3. Output S
~~~
{: artwork-name="alg-composite-sig-gen"}

Note on composite inputs: the method of providing the list of component keys and algorithms is flexible and beyond the scope of this pseudo-code, for example they may be carried in CompositePrivateKey and CompositeParams structures. It is also possible to generate a composite signature that combines signatures from distinct keys stored in separate software or hardware keystores. Variations in the process to accommodate particular private key storage mechanisms are considered to be conformant to this document so long as it produces the same output as the process sketched above.

Since recursive composite public keys are disallowed in {{I-D.ounsworth-pq-composite-keys}}, no component signature may itself be a composite; ie the signature generation process MUST fail if one of the private keys K1, K2, .., Kn is a composite with the OID id-alg-composite.

A composite signature MUST produce, and include in the output, a signature value for every component key in  and include in the output, a signature value for every component key in the corresponding CompositePublicKey, and they MUST be in the same order; ie in the output, S1 MUST correspond to K1, S2 to K2, etc. The authors recognize that there may be valid use cases for "subset signature generation"; see {{sec-subset-sig-gen}} for further discussion of security implications, and {{sec-backwards-compat}} for further discussion of backwards compatibility implications.

For security when using a generic composite signature algorithm as defined in {{sec-generic-composite}}, the list of component signature algorithms A1, A2, .., An, which may be carried in a CompositeParams object, SHOULD be included in the signed message M to prevent an attacker from substituting a weaker algorithm which is compatible with the same public key. This attack is not unique or new to the composite format.


## Composite Signature Verification Process {#sec-comp-sig-verify}

Verification of a composite signature involves applying each component algorithm's verification process according to its specification.

In the absence of an application profile specifying otherwise, compliant applications MUST output "Valid signature" (true) if and only if all component signatures were successfully validated, and "Invalid signature" (false) otherwise.

The following process is used to perform this verification.


~~~
Input:
     P1, P2, .., Pn     Public verification keys. See note below on 
                        composite inputs.

     M                  Message whose signature is to be verified, 
                        an octet string
     
     S1, S2, .., Sn    Component signature values to be verified.
                       See note below on composite inputs.
     
     A1, A2, ... An     Component signature algorithms. See note 
                        below on composite inputs.

Output:
    Validity (bool)    "Valid signature" (true) if the composite 
                        signature is valid, "Invalid signature" 
                        (false) otherwise.

Signature Verification Procedure::
   1. Check keys, signatures, and algorithms lists for consistency.

      If Error during Desequencing, or the three sequences have
      different numbers of elements, or any of the public keys 
      P1, P2, .., Pn or algorithm identifiers A1, A2, .., An are 
      composite with the OID id-alg-composite or an explicit composite
      OID then output "Invalid signature" and stop.

   2. Check each component signature individually, according to its
       algorithm specification.
       If any fail, then the entire signature validation fails.

     for i := 1 to n
          if not verify( Pi, M, Si, Ai ), then
            output "Invalid signature"

      if all succeeded, then
        output "Valid signature"
~~~
{: artwork-name="alg-sig-verif"}

Note on composite inputs: the method of providing the list of component keys, algorithms and signatures is flexible and beyond the scope of this pseudo-code, for example they may be carried in CompositePublicKey, CompositeParams, and compositesignaturevalue structures. It is also possible to verify a composite signature where the component public verification keys belong, for example, to separate X.509 certificates or cryptographic modules. Variations in the process to accommodate particular public verification key storage mechanisms are considered to be conformant to this document so long as it produces the same output as the process sketched above.

Since recursive composite public keys are disallowed in {{I-D.ounsworth-pq-composite-keys}}, no component signature may be composite; ie the signature verification procedure MUST fail if any of the public keys P1, P2, .., Pn or algorithm identifiers A1, A2, .., An are composite with the OID id-alg-composite.

Some verification clients may include a policy mechanism for specifying acceptable subsets of algorithms. In these cases, implementer MAY, in the interest of performance of compatibility, modify the above process to skip one or more signature validations as per their local client policy. See {{sec-cons-OR-modes}} for a discussion of associated risks.

In the absence of such a policy mechanism that can be easily updated to reflect new cryptanalytic breakthroughs, clients MUST perform signature verifications in the AND mode defined here. See {{sec-subset-sig-gen}} for further discussion of security implications of subset signature verifications, and {{sec-backwards-compat}} for further discussion of backwards compatibility implications.


<!-- End of Composite Signature Algorithm section -->

# Implementation Considerations {#sec-imp-considers}

This section addresses practical issues of how this draft affects other protocols and standards.


~~~ BEGIN EDNOTE 10~~~

EDNOTE 10: Possible topics to address:

  - The size of these certs and cert chains.
  - In particular, implications for (large) composite keys / signatures / certs on the handshake stages of TLS and IKEv2.
  - If a cert in the chain is a composite cert then does the whole chain need to be of composite Certs?
  - We could also explain that the root CA cert does not have to be of the same algorithms. The root cert SHOULD NOT be transferred in the authentication exchange to save transport overhead and thus it can be different than the intermediate and leaf certs.
  - We could talk about overhead (size and processing).
  - We could also discuss backwards compatibility.
  - We could include a subsection about implementation considerations.

~~~ END EDNOTE 10~~~


## Backwards Compatibility {#sec-backwards-compat}

As noted in the introduction, the post-quantum cryptographic migration will face challenges in both ensuring cryptographic strength against adversaries of unknown capabilities, as well as providing ease of migration. The composite mechanisms defined in this document primarily address cryptographic strength, however this section contains notes on how backwards compatibility may be obtained.

The term "ease of migration" is used here to mean that existing systems can be gracefully transitioned to the new technology without requiring large service disruptions or expensive upgrades. The term "backwards compatibility" is used here to mean something more specific; that existing systems as they are deployed today can interoperate with the upgraded systems of the future.

These migration and interoperability concerns need to be thought about in the context of various types of protocols that make use of X.509 and PKIX with relation to digital signature objects, from online negotiated protocols such as TLS 1.3 [RFC8446] and IKEv2 [RFC7296], to non-negotiated asynchronous protocols such as S/MIME signed email [RFC8551], document signing such as in the context of the European eIDAS regulations [eIDAS2014], and publicly trusted code signing [codeSigningBRsv2.8], as well as myriad other standardized and proprietary protocols and applications that leverage CMS [RFC5652] signed structures.


### OR modes

{{sec-comp-sig-gen}} and {{sec-comp-sig-verify}} make reference to subset signature generation and verification modes to achieve an OR relation between component signatures, where senders and / or receivers are permitted to ignore some component keys. Some envisioned uses of this include environments where the client encounters a component signature algorithm for which it does not posses a compatible implementation but wishes to proceed with the signature verification using the subset of component signatures for which it does have compatible implementations. Such a mechanism could be designed to provide ease of migration by allowing for composite keys to be distributed and used before all clients in the environment are fully upgraded, but it does not allow for full backwards compatibility since clients would at least need to be upgraded from their current state to be able to parse the composite structures.


### Parallel PKIs

We present the term "Parallel PKI" to refer to the setup where a PKI end entity possesses two or more distinct public keys or certificates for the same identity (name), but containing keys for different cryptographic algorithms. One could imagine a set of parallel PKIs where an existing PKI using legacy algorithms (RSA, ECC) is left operational during the post-quantum migration but is shadowed by one or more parallel PKIs using pure post quantum algorithms or composite algorithms (legacy and post-quantum).

Equipped with a set of parallel public keys in this way, a client would have the flexibility to choose which public key(s) or certificate(s) to use in a given signature operation. 

For negotiated protocols, the client could choose which public key(s) or certificate(s) to use based on the negotiated algorithms, or could combine two of the public keys for example in a non-composite hybrid method such as {{I-D.becker-guthrie-noncomposite-hybrid-auth}} or {{I-D.guthrie-ipsecme-ikev2-hybrid-auth}}. Note that it is possible to use the signature algorithms defined in {{sec-alg-idents}} as a way to carry the multiple signature values generated by one of the non-composite public mechanism in protocols where it is easier to support the composite signature algorithms than to implement such a mechanism in the protocol itself. There is also nothing precluding a composite public key from being one of the components used within a non-composite authentication operation; this may lead to greater convenience in setting up parallel PKI hierarchies that need to service a range of clients implementing different styles of post-quantum migration strategies.

For non-negotiated protocols, the details for obtaining backwards compatibility will vary by protocol, but for example in CMS [RFC5652], the inclusion of multiple SignerInfo objects is often already treated as an OR relationship, so including one for each of the signer's parallel PKI public keys would, in many cases, have the desired effect of allowing the receiver to choose one they are compatible with and ignore the others, thus achieving full backwards compatibility.


## External signatures

EDNOTE: This section probably does not belong in this draft. It probably belongs instead in the core Dilithium / Falcon specs such as {{I-D.massimo-lamps-pq-sig-certificates}}.

In many contexts, a signature or a verification operation is performed inside a cryptographic module where it is desirable to provide a message digest to the cryptographic module rather than streaming the entire message (which in some cases can be very large). 

{{sec-cons-hash-then-sign}} discusses security considerations around the traditional "hash-then-sign paradigm" where a simple hash of the message is taken and then the hash value is signed. In general this is not desirable with the Dilithium and Falcon algorithms.

This means that composite signature implementations MUST NOT perform a single message digest operation and then provide that digest value to all component algorithms.

That said, the first step of both the Dilithium and Falcon algoritms is a keyed hash of the message. This section considers modifications to the Dilithium and Falcon algorithms where the first hashing step is performed externally to the cryptographic module.

That said, for use-cases where pre-hashing of messages for Dilithium or Falcon signatures is required for bandwidth or resource contraints, external hashing should be considered. Depending on the algorithm chosen additional contraints on the format of the external hashing may be required to meet the security requirements of the algorithm. The following subsections provide specific instructions for externalizing the message digest step of the Dilithium and Falcon Sign() and Verify() operations.

# Dilithium {#ext-sigs-dilithium}

The Dilithium construction includes 

~~~
Gen():
...
07 tr \in {0, 1}^384 := CRH(rho || t1)
~~~

where CRH is a collision-resistant hash, and (rho, t1) is the public key.

~~~
Sign(sk,M):
...
10: mu \in {0, 1}^384 := CRH(tr || M) 
      // which = CRH(CRH(rho || t1) || M)
~~~

and

~~~
Verify(pk, M, sigma):
mu \in {0, 1}^384 := CRH(CRH(rho || t1) || M)
~~~

These steps of the Sign() and Verify() operations MAY be externalized to a pre-computation step outside of the cryptographic module as they only need access to the public key `(rho, t1)` and the choice of hash function `CRH`, and since doing so does not affect interoperability of the signature algorithm.



# Falcon {#ext-sigs-falcon}

The Falcon construction includes

~~~
Sign(m, sk, floor(beta^2)):
1: r <- {0,1}^320 uniformly
2: c <- HashToPoint(r||m, q, n)
~~~

and

~~~
Verify(m, sig, pk, floor(beta^2)):
1: c <- HashToPoint(r||m, q, n)
~~~

where `HashToPoint` is a SHAKE256-based construct that hashes the nonce `r` and the message `m` to a lattice point using the lattice parameters `q` and `n`.

These steps of the Sign() and Verify() operations MAY be externalized to a pre-computation step outside of the cryptographic module as they only need access to the lattice parameters `q` and `n`, and since doing so does not affect interoperability of the signature algorithm. This does require generation of `r` to be performed outside of the cryptographic module for `Sign()` operations, which may or may not have security implications depending on the implementation and runtime environment.

<!-- End of In Practice section -->

# IANA Considerations {#sec-iana}

This document registers the following in the SMI "Security for PKIX Algorithms (1.3.6.1.5.5.7.6)" registry:

~~~
id-alg-composite OBJECT IDENTIFIER ::= {
    iso(1) identified-organization(3) dod(6) internet(1) security(5)
    mechanisms(5) pkix(7) algorithms(6) composite(??) }
~~~

<!-- End of IANA Considerations section -->


# Security Considerations

## Policy for Deprecated and Acceptable Algorithms

Traditionally, a public key, certificate, or signature contains a single cryptographic algorithm. If and when an algorithm becomes deprecated (for example, RSA-512, or SHA1), then clients performing signatures or verifications should be updated to adhere to appropriate policies.

In the composite model this is less obvious since a single public key, certificate, or signature may contain a mixture of deprecated and non-deprecated algorithms. Moreover, implementers may decide that certain cryptographic algorithms have complementary security properties and are acceptable in combination even though neither algorithm is acceptable by itself.

Specifying a modified verification algorithm to handle these situations is beyond the scope of this draft, but could be desirable as the subject of an application profile document, or to be up to the discretion of implementers.

~~~
2. Check policy to see whether A1, A2, ..., An constitutes a valid
   combination of algorithms.

   if not checkPolicy(A1, A2, ..., An), then
     output "Invalid signature"
~~~


## OR Modes {#sec-cons-OR-modes}

### Subset Signature Generation {#sec-subset-sig-gen}

This document defines a composite signature generation process in {{sec-comp-sig-gen}} where the signer MUST produce a signature value with each of their component private keys, this providing full protection of the content under all available component algorithms. 

The authors recognize that there may be cases where a client may wish to generate a composite signature that only uses a subset of the available component algorithms, for example to save bandwidth, or because a client has been issued a key for which it does not (yet) have implementations of all component algorithms. This could be easily encoded by placing a NULL value into the corresponding field of the CompositeSignatureValue. However, this mode was intentionally omitted from this specification as it trivially allows for stripping attacks where an attacker replaces a valid component signature value with NULL, thus reducing the security of the composite signature to the weakest of the available component algorithms.

Implementer who wish to perform subset signature generations are advised to couple it with an out-of-band policy mechanism that limits the potential for stripping attacks. Note that, in an effort to keep compliant implementations simple and secure, implementations claiming to be compliant with this draft MUST NOT generate subset signatures in this way, and MUST reject during verification any subset signatures that they encounter.


### Subset Signature Verification {#sec-subset-sig-verif}

This document defines a composite signature verification process in {{sec-comp-sig-verify}} where the verifier verifies all component signatures and fails if any component fails. The authors recognize that there will be scenarios where the verifier considers a single component algorithm -- or subset of component algorithms -- to provide sufficient security, and therefore for performance reasons wishes to skip the verification of one or more component signatures.

-- harmonize this with Serge's blurb --

Implementers who wish to perform subset signature verifications are advised to couple it with an out-of-band policy mechanism that can control the list of acceptable algorithm combinations, and keep this list up to date as new cryptanalytic advances are made.

Risks:

- Failing to update client verification policy in response to advances in cryptanalysis
- Verifications of a subset of signatures leads to ambiguity in the security strength of the signature verification; ie if a message carries two signatures, one at 128 bits and the other at 112 bits of security and clients are verifying in an OR mode with flexible policy, then it becomes difficult to audit the security strength used at runtime.
- Moreover, verifying multiple algorithms provides security even in the event that one of the algorithms has already been broken, but knowledge of the break has not been made public yet.


## Do not hash-then-sign {#sec-cons-hash-then-sign}

In the hash-then-sign paradigm, the message to be signed is hashed externally to the signature primitive, and then the hash value is signed.

The hash-then-sign paradigm is required, for example, with RSA signatures in order to sign messages larger than the RSA modulus. Hash-then-sign also gives performance and bandwidth benefits, for example, when the signature is performed by a networked cryptographic appliance since you only need to send a small hash value rather than streaming the entire message.

With Dilithium and Falcon signatures it is not recommended to pre-hash for the following reasons:


The Dilithium construction includes 

~~~
Sign(sk,M):
10: mu \in {0, 1}^384 := CRH(tr || M)
~~~

where `CRH` is any collision-resistant hash function and `tr` is a component of the secret key. This provides strong security against pre-computed collision attacks since an attacker has no knowledge of `tr` and provides per-key hash-domain separation of the message to be signed.


The Falcon construction includes 

~~~
Sign (m, sk, beta^2):
1: r <- {0, 1}^320 uniformly
2: c <- HashToPoint(r || m, q, n)
~~~

where `HashToPoint` is a SHAKE-256-based construct. This provides strong security against pre-computed collision attacks since an attacker has no a-priori knowledge of `r` and provides per-signature hash-domain separation of the message to be signed.

If the message to be signed is pre-hashed, for example `m0 = SHA256(m)` and then m0 provided to Dilithium or Falcon to sign, then you have re-introduced the collision problem since two messages m1 and m2 where SHA256(m1) == SHA256(m2) will result in a single Falcon or Dilithium signature value which is simultaneously valid for both m1 and m2. This removes the extra collision resistance built in to the Dilithium and Falcon primitives and reduces it to the collision resistance strength of the underlying hash function. For this reason it is in general not recommended to pre-hash when using Dilithium or Falcon except in cases where the implementor is comfortable with this reduction in security.

Therefore, for the purpose of interoperability of composite signatures, signature alogrithms defined in this version of this document do not pre-hash messages for Dilithium and Falcon. If pre-hashed versions of these signatures are also desired, then separate signature algorithms will need to be defined.

EDNOTE: Sync this with the authors of the Dilithium and Falcon signatures specs for LAMPS.


<!-- End of Security Considerations section -->

<!-- Start of Appendices -->

--- back

# Work in Progress

## Combiner modes (KofN)

For content commitment use-cases, such as legally-binding non-repudiation, the signer (whether it be a CA or an end entity) needs to be able to specify how its signature is to be interpreted and verified.

For now we have removed combiner modes (AND, OR, KofN) from this draft, but we are still discussing how to incorporate this for the cases where it is needed (maybe a X.509 v3 extension, or a signature algorithm param).


# Creating explicit combinations {#appdx-creatingExplicitCombinations}

The following ASN.1 Information Objects may be useful in defining and parsing explicit pairs of signature algorithms. 

... TODO ... copy & adapt from the keys draft.


# Examples {#appdx-examples}


## Generic Composite Signature Examples {#appdx-genComposite-examples}

TODO

## Explicit Composite Signature Examples {#appdx-expComposite-examples}

TODO

# ASN.1 Module

~~~ asn.1

<CODE STARTS>

Composite-Signatures-2019
  { TBD }

DEFINITIONS IMPLICIT TAGS ::= BEGIN

EXPORTS ALL;

IMPORTS
  PUBLIC-KEY, SIGNATURE-ALGORITHM
    FROM AlgorithmInformation-2009  -- RFC 5912 [X509ASN1]
      { iso(1) identified-organization(3) dod(6) internet(1)
        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-algorithmInformation-02(58) }

  SubjectPublicKeyInfo
    FROM PKIX1Explicit-2009
      { iso(1) identified-organization(3) dod(6) internet(1)
        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-pkix1-explicit-02(51) }

  OneAsymmetricKey
    FROM AsymmetricKeyPackageModuleV1
      { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
        pkcs-9(9) smime(16) modules(0)
        id-mod-asymmetricKeyPkgV1(50) } ;

--
-- Object Identifiers
--

id-alg-composite OBJECT IDENTIFIER ::= { TBD }

--
-- Public Key
--

pk-Composite PUBLIC-KEY ::= {
    IDENTIFIER id-alg-composite
    KEY CompositePublicKey
    PARAMS ARE absent
    PRIVATE-KEY CompositePrivateKey
}

CompositePublicKey ::= SEQUENCE SIZE (2..MAX) OF SubjectPublicKeyInfo

CompositePrivateKey ::= SEQUENCE SIZE (2..MAX) OF OneAsymmetricKey

--
-- Signature Algorithm
--

sa-CompositeSignature SIGNATURE-ALGORITHM ::= {
    IDENTIFIER id-alg-composite
    VALUE CompositeSignatureValue
    PARAMS TYPE CompositeParams ARE required
    PUBLIC-KEYS { pk-Composite }
    SMIME-CAPS { IDENTIFIED BY id-alg-composite } }

CompositeParams ::= SEQUENCE SIZE (2..MAX) OF AlgorithmIdentifier

CompositeSignatureValue ::= SEQUENCE SIZE (2..MAX) OF BIT STRING

END

<CODE ENDS>

~~~


# Intellectual Property Considerations

The following IPR Disclosure relates to this draft:

https://datatracker.ietf.org/ipr/3588/



# Contributors and Acknowledgements
This document incorporates contributions and comments from a large group of experts. The Editors would especially like to acknowledge the expertise and tireless dedication of the following people, who attended many long meetings and generated millions of bytes of electronic mail and VOIP traffic over the past year in pursuit of this document:

John Gray (Entrust),
Serge Mister (Entrust),
Scott Fluhrer (Cisco Systems),
Panos Kampanakis (Cisco Systems),
Daniel Van Geest (ISARA),
Tim Hollebeek (Digicert), and
FranÃ§ois Rousseau.

We are grateful to all, including any contributors who may have
been inadvertently omitted from this list.

This document borrows text from similar documents, including those referenced below. Thanks go to the authors of those
   documents.  "Copying always makes things easier and less error prone" - [RFC8411].

## Making contributions

Additional contributions to this draft are welcome. Please see the working copy of this draft at, as well as open issues at:

https://github.com/EntrustCorporation/draft-ounsworth-composite-sigs

<!-- End of Contributors section -->
