---
title: Composite Keys and Signatures For Use In Internet PKI
abbrev: PQ Composite Certs
# <!-- EDNOTE: Edits the draft name -->
docname: draft-ounsworth-pq-composite-sigs-00
# <!-- date: 2012-01-13 -->
# <!-- date: 2012-01 -->
# <!-- date: 2012 -->

# <!-- stand_alone: true -->
<!-- ipr: trust200902 -->
area: Security
wg: LAMPS
kw: Internet-Draft
cat: std

coding: us-ascii
pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:
    -
      ins: M. Ounsworth (Editor)
      name: Mike Ounsworth
      org: Entrust Datacard Limited
      abbrev: Entrust Datacard
      street: 1000 Innovation Drive
      city: Ottawa, Ontario
      country: Canada
      code: K2K 1E3
      email: mike.ounsworth@entrustdatacard.com

    -
      ins: M. Pala (Editor)
      name: Massimiliano Pala
      org: CableLabs
      email: director@openca.org

normative:
  RFC1421:
  RFC2119:
  RFC2986:
  RFC4210:
  RFC4648:
  RFC5280:
  RFC5652:
  RFC5958:
  RFC7468:
  RFC8174:
  RFC8411:

# <!-- EDNOTE: full syntax for this defined here: https://github.com/cabo/kramdown-rfc2629 -->

informative:
  I-D.draft-truskovsky-lamps-pq-hybrid-x509-01:
  I-D.draft-pala-composite-crypto-00:

<!--updates:
  RFC2986
  RFC5280
  RFC5652 -->
# <!-- EDNOTE: does it update these anymore?? -->


# <!-- EDNOTE: Add RFC 3279? -->

--- abstract
With the widespread adoption of post-quantum cryptography will come the need for an entity to possess multiple public keys on different cryptographic algorithms. Since the trustworthiness of individual post-quantum algorithms is at question, a multi-key cryptographic operation will need to be performed in such a way that breaking it requires breaking each of the component algorithms individually. This requires defining new structures for holding composite public keys and composite signature data.

This document defines the structures CompositePublicKey, CompositeSignatureValue, and CompositeParams, which are sequences of the respective structure for each component algorithm. This document also defines algorithms for generating and verifying composite signatures. This document makes no assumptions about what the component algorithms are, provided that their algorithm identifiers and signature generation and verification algorithms are defined.

<!-- End of Abstract -->


--- middle

# Introduction {#sec-intro}

During the transition to post-quantum cryptography, there will be uncertainty as to the strength of cryptographic algorithms; we will no longer fully trust traditional cryptography such as RSA, Diffie-Hellman, DSA and their elliptic curve variants, but we will also not fully trust their post-quantum replacements until they have had sufficient scrutiny. Unlike previous cryptographic algorithm migrations, the choice of when to migrate and which algorithms to migrate to, is not so clear. Even after the migration period, it may be advantageous for an entity's cryptographic identity to be composed of multiple public-key algorithms.

The deployment of composite public keys and composite signatures using post-quantum algorithms will face two challenges

- Algorithm strength uncertainty: During the transition period, some post-quantum signature and encryption algorithms will not be fully trusted, while also the trust in legacy public key algorithms will also start to erode.  A relying party may learn some time after deployment that a public key algorithm has become untrustworthy, but in the interim, they may not know which algorithm an adversary has compromised.
- Backwards compatibility: During the transition period, post-quantum algorithms will not be supported by all clients.

This document provides a mechanism to address algorithm strength uncertainty by providing formats for encoding multiple public keys and multiple signature values into existing public key and signature fields, as well as an algorithm for validating a composite signature. The issue of backwards compatibility is left open to be addressed in separate draft(s).

This document is intended for general applicability anywhere that public key structures or digital signatures are used within PKIX structures.

_EDNOTE: While the scope of this document is restricted to signatures, we note that the same `CompositePublicKey` structure is equally applicable to asymmetric encryption keys. Though a word of warning that the corresponding "encrypt / decrypt with a composite public key" logic is somewhat less obvious; a naive implementer might be tempted to follow the same pattern as below and encrypt the message with each public key separately and then concatenate the ciphertexts, which is wrong, they need to be nested.  Specifying the correct implementation of such an encryption scheme is out of scope for this document, but would be good work for someone in the standards community to pick up._

<!-- End of Introduction section -->


## Conventions and Terminology {#sec-terminology}
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 {{RFC2119}}  {{RFC8174}} when, and only when, they appear in all capitals, as shown here.


The following terms are used:

_EDNOTE: A glossary of terms we define for this document, or terms that we borrow from other RFCs._

~~~
ALGORITHM: An information object class for identifying the type of
            cryptographic operation to be performed. This document is
            primarily concerned with algorithms for producing digital
            signatures, though the public key structure could just as
            easily hold encryption keys.

BER:  Basic Encoding Rules (BER) as defined in [X.690].

COMPONENT ALGORITHM:  A single basic algorithm which is contained
                      within a composite algorithm.

COMPOSITE ALGORITHM:  An algorithm which is a sequence of one or
                      more basic algorithm, as defined in
                      {{sec-composite-structs}}.

DER:  Distinguished Encoding Rules as defined in [X.690].

SIGNATURE:  ... digital cryptographic signature, making no
            assumptions about which algorithm.

~~~
{: artwork-name="glossary"}


## Notation
No special notation is used in this document.

# Composite Structures {#sec-composite-structs}
In order for public keys and signatures to be composed of multiple algorithms, we define a new algorithm identifier called "composite" which contains a list of public key or signature primitives.

We define encodings of sequences of public keys and signature data which consist of a sequence of public keys and signatures from more basic signature algorithms (aka "component algorithms") such that these structures can be used an a drop-in compatible way with existing public key or signature structures such as those defined in PKCS#10 [RFC2986], CMP [RFC4210], X.509 [RFC5280], CMS [RFC5652].

This section defines

  - The compositePublicKey carries all the public keys associated with an identity within a single public key structure.

  - The compositePrivateKey carries all the private keys associated with an identity within a single private key structure.

  - The compositeSignature, carries a sequence of signatures that are generated by a compositePrivateKey, and can be verified with the corresponding compositePublicKey.

_EDNOTE: Defining composite algorithm parameters as a sequence inside the existing structure avoids an exponential proliferation of OIDs that are needed for each pairwise combination of signature algorithms in other competing schemes for achieving multi-key certificates. This scheme also naturally extends from 2-keypair to n-keypair keys and certificates._

## Algorithm Identifier

The same algorithm identifier is used for identifying a public key, a private key, and a signature.  Additional encoding information is provided below for each of these objects.

~~~ asn.1
id-alg-composite OBJECT IDENTIFIER ::= {
    iso(1)  identified-organization(3) dod(6) internet(1) private(4)
    enterprise(1) OpenCA(18227) Algorithms(2) id-alg-composite(1) }
~~~

EDNOTE: this is a temporary OID for the purposes of prototyping. We are requesting IANA to assign a permanent OID, see section {{sec-iana}}.

## Composite Keys

The ASN.1 algorithm object for composite public and private keys is:

EDNOTE: there has been some discussion of using the parameters to duplicate either the number of component keys, or their algorithm IDs. Unclear at the moment if this is worth the complexity, but it has been proposed.

~~~ asn.1
pk-Composite PUBLIC-KEY ::= {
    IDENTIFIER id-alg-composite
    KEY CompositePublicKey
    PARAMS ARE absent
    CERT-KEY-USAGE
        { digitalSignature, nonRepudiation, keyCertSign, cRLSign }
    PRIVATE-KEY CompositePrivateKey
}
~~~
{: artwork-name="CompositeAlgorithmObject-asn.1-structures"}

## Composite Public Key {#sec-composite-pub-keys}

A composite public key is a sequence of component public keys that are used together.  The AlgorithmIdentifier for a composite public key uses the id-Composite object identifier, and the parameters field MUST be absent.  A composite public key MUST contain at least one component public key.  A CompositePublicKey MUST NOT contain a SubjectPublicKeyInfo which itself describes a composite key; ie recursive CompositePublicKeys are not allowed.

Each element of a CompositePublicKey is a SubjectPublicKeyInfo object for a component public key.  When the CompositePublicKey must be provided in octet string or bit string format, the data structure is converted as specified in {{sec-encoding-rules}}.

The composite public key data is represented by the following structure:

~~~ asn.1
CompositePublicKey ::= SEQUENCE SIZE (1..MAX) OF SubjectPublicKeyInfo
~~~
{: artwork-name="CompositePublicKey-asn.1-structures"}

## Key Usage Bits

The intended application for the key is indicated in the keyUsage certificate extension and defined in the CERT-KEY-USAGE field of pk-Composite.

If the keyUsage extension is present in an end-entity certificate that indicates id-Composite, then the keyUsage extension MUST contain one or both of the following values:

~~~
    nonRepudiation; and
    digitalSignature.
~~~
{: artwork-name="Cert-Key-Usage-1"}

If the keyUsage extension is present in a certification authority certificate that indicates id-alg-composite, then the keyUsage extension MUST contain one or more of the following values:

~~~
    nonRepudiation;
    digitalSignature;
    keyCertSign; and
    cRLSign.
~~~
{: artwork-name="Cert-Key-Usage-2"}

As this draft only covers composite signatures, the key usage bits specified here apply to all component keys within a composite key.

## Composite Private Key

A composite private key is a sequence of component private keys that are used together.  The AlgorithmIdentifier for a composite private key uses the id-alg-composite object identifier, and the parameters field MUST be absent.  A composite private key MUST contain at least one component private key.

Each element of a CompositePrivateKey is a OneAsymmetricKey [RFC5958] object for a component private key.  The component private key's OneAsymmetricKey object may optionally include the corresponding public key.

The composite private key data is represented by the following structure:

~~~ asn.1
CompositePrivateKey ::= SEQUENCE SIZE (1..MAX) OF OneAsymmetricKey
~~~
{: artwork-name="CompositePrivateKey-asn.1-structures"}

## Composite Signature Algorithm {#sec-composite-sigs}

The ASN.1 algorithm object for a composite signature is:

~~~ asn.1
sa-CompositeSignature SIGNATURE-ALGORITHM ::= {
    IDENTIFIER id-alg-composite
    VALUE CompositeSignatureValue
    PARAMS TYPE CompositeParams ARE required
    PUBLIC-KEYS { pk-Composite }
    SMIME-CAPS { IDENTIFIED BY id-Composite } }
}
~~~

The id-alg-composite object identifier is used to identify when a signature has been created by a composite private key.

The following algorithm parameters MUST be included when this identifier is used to identify a signature algorithm:

~~~ asn.1
CompositeParams ::= SEQUENCE SIZE (1..MAX) OF AlgorithmIdentifier
~~~
{: artwork-name="CompositeSignatureParams-asn.1-structures"}

When a composite signature is generated by a composite private key, the signature's CompositeParams sequence MUST contain the same component algorithms listed in the same order as in the associated CompositePrivateKey and CompositePublicKey.

The composite signature algorithm output is the DER encoding of the following structure:

~~~ asn.1
CompositeSignatureValue ::= SEQUENCE SIZE (1..MAX) OF BIT STRING
~~~
{: artwork-name="composite-sig-asn.1"}

Where each component within a CompositeSignatureValue SEQUENCE is a BIT STRING wrapping a signature produced by one of the component signature algorithms.

The choice of `SEQUENCE SIZE (1..MAX) OF BIT STRING` is so the BIT STRING encoding can solve the problem of variable-length signature values. The signature's `CompositeSignatureValue` sequence MUST contain signatures by the same component algorithms listed in the same order as in the associated `CompositeParams`.

## Encoding Rules {#sec-encoding-rules}
<!-- EDNOTE: Examples of how other specifications specify how a data structure is converted to a bit string can be found in RFC 2313, section 10.1.4, 3279 section 2.3.5, and RFC 4055, section 3.2. -->

Many specifications require that the composite public key, composite private key, and composite signature data structures be represented by an octet string or bit string.

When an octet string is required, the DER encoding of the composite data structure SHALL be used directly.

When a bit string is required, the octets of the DER encoded composite data structure SHALL be used as the bits of the bit string, with the most significant bit of the first octet becoming the first bit, and so on, ending with the least significant bit of the last octet becoming the last bit of the bit string.

In the interest of simplicity and avoiding compatibility issues, implementations that parse these structures MAY accept both BER and DER.

# Composite Signature Algorithm {#sec-composite-signature-algorithm}
The Composite Signature signature algorithm generates a single composite signature by using multiple private keys to apply multiple signature algorithms to the input message, with the resulting signature effectively being the concatenation of the individual signature values.

This algorithm addresses algorithm strength uncertainty by providing the verifier with parallel signatures from all the component signature algorithms used as part of the composite signature; breaking the composite signature would require breaking each of the component signatures.

## Composite Signature Generation {#sec-comp-sig-gen}

The following algorithm is used to generate composite signature values.

~~~
Input:
     K1, K2, .., Kn    Private keys for the n component signature
                        algorithms
     M                  Message to be signed, an octet string

Output:
     S                  Signature, an octet string

Signature Generation Procedure:
   1. Generate the n component signatures independently,
      according to their algorithm specifications.  
        for i := 1 to n
            Si := Sign( Ki, M )
   2. Encode the component signatures into an ASN.1 value of type
      Signature, where the type Signature has the syntax
        Signature ::= Sequence { S1, S2, ..., Sn }
     Let S be the DER encoding of the Signature
   3. Output S
~~~
{: artwork-name="alg-composite-sig-gen"}

Since recursive composite public keys are disallowed in section {{sec-composite-pub-keys}}, no component signature may itself be composite; ie the signature generation routine MUST fail if one of the private keys K1, K2, .., Kn is composite with the OID id-alg-composite.

## Composite Signature Verification {#sec-comp-sig-verify}
Verification of a composite signature involves applying each component algorithm's verification routine according to its specification, and then outputting "Valid signature" (true) if a sufficient number of component algorithms were valid, and "Invalid signature" (false) otherwise.

In order to future-proof implementations of verifiers against evolutions in cryptographic algorithms and attacks against them, implementations SHOULD include a field-updatable policy mechanism for determining which and/or how many component algorithms must be valid in order for the composite signature as a whole to be considered valid. This section assumes the existence of such a policy mechanism, denoted as `checkPolicy(A1, A2, ..., An)` in the algorithm below. The implementation of such a policy mechanism is the responsibility of the verifier / client and therefore is out of scope for this document, but this document notes that at least one component signature MUST be verified.

EDNOTE: See the appendix {{sec-alg-revocation-policy}} for further discussion of possible standardization of such mechanisms.

This section provides a sample algorithm for validating composite signatures. Compliant implementations MUST return "Invalid signature" whenever the sample algorithm does, with the exception of the modification noted below.


~~~
Input:
     P    Signer's composite public key
     M    Message whose signature is to be verified, an octet string
     S    Composite Signature to be verified
     A    Composite Algorithm identifier

Output:
    Validity      "Valid signature" (true) if the composite signature
                  is valid, "Invalid signature" (false) otherwise.

Signature Verification Procedure::
   1. Parse P, S, A into the component public keys, signatures,
      algorithm identifiers
      P1, P2, .., Pn := Desequence( P )
      S1, S2, .., Sn := Desequence( S )
      A1, A2, .., An := Desequence( A )

    If Error during Desequencing, or the three sequences have
    different numbers of elements, then output "Invalid signature"
    and stop.

   2. Check policy to see whether A1, A2, ..., An constitutes a valid
        combination of algorithms.
     if not checkPolicy(A1, A2, ..., An), then
       output "Invalid signature"

   3. Check each component signature individually. If any fail, then
        the entire signature validation fails
     for i := 1 to n
        Verify the component signature according to the component
        algorithm's specification
          if not verify( Pi, M, Si ), then
            output "Invalid signature"

      if all succeeded, then
        output "Valid signature"
~~~
{: artwork-name="alg-sig-verif"}

Since recursive composite public keys are disallowed in section {{sec-composite-pub-keys}}, no component signature may be composite; ie the signature verification procedure MUST fail if any of the public keys P1, P2, .., Pn or algorithm identifiers A1, A2, .., An are composite with the OID id-alg-composite.

There will be circumstances in which the verifier does not have cryptographic libraries for all of the provided component algorithms, or where the performance gains from omitting algorithms justifies the loss of security. In these cases, an acceptable modification to this algorithm is to produce in step 2 one or more subsets of the algorithms `A1, A2, ..., An` which constitute acceptable combinations, outputting "Invalid signature" if an acceptable subset can not be found, and then in step 3 only perform verification of the necessary component algorithms.

Implementations SHOULD verify all recognized and supported algorithms, and output "Invalid signature" if the verification of any component signature fails, but MAY choose to only verify a subset of the algorithms for the reasons stated above.


<!-- End of Composite Signature Algorithm section -->

# In Practice {#sec-in-pract}
_EDNOTE: This section will talk about practical issue of how these certificates will be used. For example it will talk about the size of these certs and cert chains. It will explain that if a cert in the chain is a Composite cert then the whole chain needs to be of Composite Certs. It will also explain that the root CA cert does not have to be of the same algorithms. The root cert SHOULD NOT be transferred in the authentication exchange to save transport overhead and thus it can be different than the intermediate and leaf certs. It will talk about overhead (size and processing). It will also discuss backwards compatibility. It could include a subsection about implementation considerations._


## PEM Storage of Composite Private Keys

CompositePrivateKeys can be encoded to the PEM format by placing a CompositePrivateKey into the privateKey field of a PrivateKeyInfo or OneAsymmetricKey object, and then applying the PEM encoding rules as defined in [RFC7468] section 10 and 11 for plaintext and encrypted private keys, respectively.

EDNOTE: Do we really need this? Isn't it obvious? We do want to open the can of worms of needing to add a similar sentence for every protocol and encoding under the sun?


## Asymmetric Key Packages (CMS)

The Cryptographic Message Syntax (CMS), as defined in [RFC5652], can be used to digitally sign, digest, authenticate, or encrypt the asymmetric key format content type.

When encoding composite private keys, the privateKeyAlgorithm in the OneAsymmetricKey SHALL be set to id-ce-compositePrivateKey.

The parameters of the privateKeyAlgorithm SHALL be a sequence of AlgorithmIdentifier objects, each of which are encoded according to the rules defined for each of the different keys in the composite private key.

The value of the privateKey field in the OneAsymmetricKey SHALL be set to the DER encoding of the SEQUENCE of private key values that make up the composite key. The number and order of elements in the sequence SHALL be the same as identified in the sequence of parameters in the privateKeyAlgorithm.

The value of the publicKey (if present) SHALL be set to the DER encoding of the corresponding CompositePublicKey. If this field is present, the number and order of component keys MUST be the same as identified in the sequence of parameters in the privateKeyAlgorithm.

The value of the attributes is encoded as usual.


<!-- End of In Practice section -->

# Implications for existing standards

## RFC 2986
_EDNOTE: summarize the updates to RFC 2986 (CSR / PKCS#10)._


## RFC 5280
_EDNOTE: summarize the updates to RFC 5280 (X.509)._



## Cryptographic protocols
This section talks about how protocols like (D)TLS and IKEv2 are affected by this specifications. It will not attempt to solve all these problems, but it will explain the rationale, how things will work and what open problems need to be solved. Obvious issues that need to be discussed.

- How does the protocol declare support for composite signatures?  TLS has hooks for declaring support for specific signature algorithms, however it would need to be extended, because the client would need to declare support for both the composite infrastructure, as well as for the various component signature algorithms.

- How does the protocol use the multiple keys.  The obvious way would be to have the server sign using its composite public key; is this sufficient.

- Overhead; including certificate size, signature processing time, and size of the signature.

- How to deal with crypto protocols that use public key encryption algorithms; this document only lists how to work with signature algorithms.  Encoding composite public keys is straightforward; encoding composite ciphertexts is less so - we decided to put that off to another draft.


<!-- End of Implications for existing standards section -->

# IANA Considerations {#sec-iana}
The ASN.1 module OID is TBD.  The id-alg-composite OID is to be assigned by IANA.  The authors suggest to use the id-pkix arc for this usage:

~~~
id-alg-composite OBJECT IDENTIFIER ::= {
    iso(1) identified-organization(3) dod(6) internet(1) security(5)
    mechanisms(5) pkix(7) algorithms(6) composite(??) }
~~~

<!-- End of IANA Considerations section -->


# Security Considerations

## Protection of Private Keys

This structures described in this document do not protect the private keys information in any way unless combined with a security protocol or encryption properties of the objects (if any) where the CompositePrivateKey is used (see next Section).

Protection of the private key information is vital to public key cryptography.  The consequences of disclosure depend on the purpose of the private key. If a private key is used for signature, then the disclosure allows unauthorized signing.  If a private key is used for key management, then disclosure allows unauthorized parties to access the managed keying material. The encryption algorithm used in the encryption process must be as 'strong' as the key it is protecting.

## Checking for Compromised Key Reuse

CA implementations need to be careful when checking for compromised key reuse, for example as required by WebTrust regulations; when checking for compromised keys, you MUST unpack the CompositePublicKey structure and compare individual component keys.


## Composite Encryption and KEMs

This document deals only with signature keys. While the CompositePublicKey and CompositePrivateKey structures could equally be used to hold encryption or KEM keys, the authors warn that there are non-trivial design decisions to be made when constructing a multi-key public key encryption or KEM algorithm. Some of these design and implementation decisions, if done incorrectly will result in a catastrophic loss of security. We leave it to the community to standardize analogous composite encryption and KEM schemes.



<!-- End of Security Considerations section -->

# Appendices

## ASN.1 Module

~~~ asn.1

<CODE STARTS>

Composite-Signatures-2019
  { TBD }

DEFINITIONS IMPLICIT TAGS ::= BEGIN

EXPORTS ALL;

IMPORTS
  PUBLIC-KEY, SIGNATURE-ALGORITHM
    FROM AlgorithmInformation-2009  -- RFC 5912 [X509ASN1]
      { iso(1) identified-organization(3) dod(6) internet(1)
        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-algorithmInformation-02(58) }

  SubjectPublicKeyInfo
    FROM PKIX1Explicit-2009
      { iso(1) identified-organization(3) dod(6) internet(1)
        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-pkix1-explicit-02(51) }

  OneAsymmetricKey
    FROM AsymmetricKeyPackageModuleV1
      { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
        pkcs-9(9) smime(16) modules(0)
        id-mod-asymmetricKeyPkgV1(50) } ;

--
-- Object Identifiers
--

id-Composite OBJECT IDENTIFIER ::= { TBD }

--
-- Public Key
--

pk-Composite PUBLIC-KEY ::= {
    IDENTIFIER id-Composite
    KEY CompositePublicKey
    PARAMS ARE absent
    CERT-KEY-USAGE
        { digitalSignature, nonRepudiation, keyCertSign, cRLSign }
    PRIVATE-KEY CompositePrivateKey
}

CompositePublicKey ::= SEQUENCE SIZE (1..MAX) OF SubjectPublicKeyInfo

CompositePrivateKey ::= SEQUENCE SIZE (1..MAX) OF OneAsymmetricKey

--
-- Signature Algorithm
--

sa-CompositeSignature SIGNATURE-ALGORITHM ::= {
    IDENTIFIER id-Composite
    VALUE CompositeSignatureValue
    PARAMS TYPE CompositeParams ARE required
    PUBLIC-KEYS { pk-Composite }
    SMIME-CAPS { IDENTIFIED BY id-Composite } }

CompositeParams ::= SEQUENCE SIZE (1..MAX) OF AlgorithmIdentifier

CompositeSignatureValue ::= SEQUENCE SIZE (1..MAX) OF BIT STRING

END

<CODE ENDS>

~~~

## Intellectual Property Considerations

The authors are aware that Massimiliano Pala and CableLabs hold Intellectual Property around composite key, signatures, and certificates. We have a verbal agreement with Max that this IP will be made freely available to the community.

However, at time of writing, this is all verbal hearsay; we have yet to find any written documentation of the existence of the IPR.

<!-- Keep it here only for reference, in case it is needed
## Comparison with draft-truskovsky-lamps-pq-hybrid-x509
_EDNOTE: This section will explain the differences from {{I-D.truskovsky-lamps-pq-hybrid-x509}}._
-->
<!-- End of Comparison with draft-truskovsky-lamps-pq-hybrid-x509 section -->

## Other ideas that were considered
This section is here to be informative during the review process, to document ideas that were raised and the rationales for not including them in the final draft.



### Mechanisms to distribute verification policy to clients {#sec-alg-revocation-policy}

EDNOTE: The authors had extensive discussions about how to handle algorithm revocation / deprication, sepcifically around how to distribute policy information to verifiers. In the end we decided to remove the whole thing and instead leave this is a responsibility of the implementors of the software performing signature verification.

EDNOTE: The original content for this section is left for interest's sake, but should be removed in a subsequent version of this draft.

--

In the traditional world of single-key public keys and signatures, the semantics of a signature and a verification are straight-forward: if the key is trusted (via public key pinning, a PKIX revocation check, etc) and the signature is valid, then the signed content can be trusted. However the semantics are less obvious in a world where public keys and signatures are composed of two or more algorithms; it is conceivable that even though one component algorithm fails verification, for example because the algorithm is revoked, a multi-algorithm signature may contain enough other trustworthy component algorithms to still be considered valid.

This section addresses how a verifier can obtain policy information for which and/or how many component algorithms must be valid in order for the signature as a whole to be valid. The authors ask for community feedback about whether this needs to be specified, and if so, how best to do it.

This section lists rough outlines for several such mechanisms that have come up in discussion during the drafting of this document. They are mainly focused around X.509 PKIs, and provided here merely for the purposes of sparking debate. The authors believe that by specifying such a mechanism, the world will be able to more quickly react to news of algorithm compromise with a lower service disruption compared to the need to revoke and re-issue all certificates using that algorithm. However, we are not sure if the gains justify the added complexity.

#### Local verifier policy

Much as we do today, this is left up to domain administrators and software vendors to implement the guidance of governing bodies on a system-by-system basis.

#### Extra metadata in the public key or signature

This policy information could be specified by the signer at signing time. Depending on the structure of the databeing signed, this metadata could go into the public key, or an extension to the signature, or some other field provided that it is inside the signed data blob.

#### Extra metadata in the certificate

This policy information could be included in a certificate via an X.509 v3 extension. This gives the Certificate Authority control, but has the drawback that updating the policy requires revoking and reissuing certificates.

#### Policy certificate issued by the Certificate Authority

Certificate Authorities have the ability to issue policy certificates that specify the behaviour when verifying signatures performed by keys in certificates within the scope of the policy certificate.

This method has the advantage that policy is centrally-managed, and can be updated without needing to reissue any certificates, but has the drawback that not all PKI implementations support policy certificates.

#### Policy constraints in a cross-certificate

This method behaves similarly to the policy certificate method above, but has better support across PKI implementations.

#### Revoked Algorithms CRL Extension {#sec-revokedalgorithms}

Add an extension to CRLs so that in addition to revoking certificates, they can also revoke algorithms for all certificates within the scope of that CRL. Implemented with care, this could allow a single PKI to do a staged algorithm migration by only revoking the algorithm for one CRL group at a time.

~~~ asn.1
id-ce-RevokedAlgorithms OBJECT IDENTIFIER ::= { OID }

RevokedAlgorithms ::= SEQUENCE OF SEQUENCE  {
     algorithms              AlgorithmIdentifier,
     revocationDate          Time,
     crlEntryExtensions      Extensions OPTIONAL
                              -- if present, version MUST be v2
     }
~~~
{: artwork-name="RevokedAlgorithm-asn.1"}

_EDNOTE: do we need the crlEntryExtensions field? If so, which ones from https://tools.ietf.org/html/rfc5280#section-5.3 are allowed here?_

There may only be one `RevokedAlgorithms` extension in a CRL. This extension is OPTIONAL. If a CRL contains only composite certificates, then this extension SHOULD be designated as critical. If a CRL contains a mixture of composite and traditional certificates then it SHOULD be designated as non-critical.

If the Revoked Algorithms extension is present in a CRL, then a client performing a certificate validation on an otherwise non-revoked certificate within the scope of that CRL MUST skip any signatures corresponding to a revoked algorithm; thus a certificate is valid only if it would have been valid had those Algorithm IDs and Signature Values been omitted from the certificate.

Once a algorithm has been marked as revoked on a given CRL, it MUST remain revoked on subsequent CRLs.

_EDNOTE: Is there corresponding wording about cert serial numbers on CRLs from RFC5280? Or is this unnecessary implied?_


Note that a similar mechanism could be used on a per-certificate basis via CRL Entry Extensions, however the authors believe that giving operators the ability to perform partial revocation of a certificate (ie revoking some keys or signatures but leaving the certificate as a whole valid) will greatly increase the complexity of certificate validation routines, thus increasing the chance of both human error, and implementation bugs leading to vulnerabilities, without providing a commensurate amount of increased functionality. By not defining a new CRL Entry Extension, the following requirement is implied: if any key within a certificate warrant revocation, the entire certificate MUST be revoked using the existing revocation mechanisms (this does not apply when the algorithm is globally revoked for the entire scope of this CRL).

##### Implicit Revocation {#sec-implicit-revocation}

A Composite Signature Algorithm is considered to be "implicitly revoked" if the certificate is otherwise valid but one of the following conditions are met.

* A certificate using a single-key algorithm which is revoked within the scope of its CRL. In this case, signature verification SHOULD fail when performed by a compliant client, but of course will succeed when performed by a legacy client which is not aware of this CRL extension.
* All of the component algorithms are revoked within the scope if its CRL. In this case, signature verification MUST fail when performed by a compliant client, regardless of which verification algorithm is used.

At the time of an algorithm revocation, a certificate authority MAY revoke certificates meeting one ofd the above criteria (by placing them in the traditional `revokedCertificates` list) with a revocation reason of `keyCompromise`. OCSP responders SHOULD designate a certificate as revoked if it meets the above condition.






# Contributors and Acknowledgements
This document incorporates contributions and comments from a large
group of experts. The Editors would especially like to acknowledge the
expertise and tireless dedication of the following people, who attended
many long meetings and generated millions of bytes of electronic mail
over the past few years and months in pursuit of this document:
John Gray (Entrust Datacard), Serge Mister (Entrust Datacard),
Scott Fluhrer (Cisco Systems), Panos Kampanakis (Cisco Systems),
Daniel Van Geest (ISARA) and Tim Hollebeek (Digicert).

We are grateful to all, including any contributors who may have
been inadvertently omitted from this list.

This document borrows text from similar documents, including those referenced below. Thanks go to the authors of those
   documents.  "Copying always makes things easier and less error prone" - [RFC8411].

<!-- End of Contributors section -->
